{"meta":{"title":"weihc","subtitle":null,"description":null,"author":"weihc","url":"http://weihuchao.top"},"pages":[{"title":"404 Page NOT Found","date":"2018-05-26T10:07:57.000Z","updated":"2018-05-26T10:07:57.000Z","comments":false,"path":"/404.html","permalink":"http://weihuchao.top//404.html","excerpt":"","text":""},{"title":"关于我","date":"2018-03-30T16:00:00.000Z","updated":"2018-07-06T15:30:10.000Z","comments":true,"path":"about/index.html","permalink":"http://weihuchao.top/about/index.html","excerpt":"","text":"基本信息一个工作三年的python后端工程师，一个热爱技术不断进取学习，却没有精良的拍照技术也没有高超的着装技巧的技术宅。热爱互联网却反应迟钝，关注最新技术却沉迷于已有知识的优化。工作之余正在着手完成翻译符合中国人思维的技术文档。最大的梦想就是不断提高生活质量，让我在生活之余能够惬意的肆意挥毫和来几盘象棋。 工作经验北京指动科技有限公司，Python后端工程师，负责游戏运营平台与服务端的构建和开发。华宇(大连)信息服务有限公司，Java工程师，负者各个法院检察院等相关网站CMS项目。 知识技能 Python， Java H5， CSS，JS MySQL，MongoDB Ubuntu Salt stack，Elastic Stack zabbix"},{"title":"分类","date":"2018-03-30T16:00:00.000Z","updated":"2018-05-26T08:14:48.000Z","comments":true,"path":"categories/index.html","permalink":"http://weihuchao.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-05-26T09:39:52.000Z","updated":"2018-05-26T09:39:52.000Z","comments":true,"path":"tags/index.html","permalink":"http://weihuchao.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"python拾遗","slug":"python拾遗","date":"2018-08-31T16:00:00.000Z","updated":"2018-09-06T11:32:42.000Z","comments":true,"path":"2018/09/01/python拾遗/","link":"","permalink":"http://weihuchao.top/2018/09/01/python拾遗/","excerpt":"","text":"1 输入输出print()函数可以传入多个参数，多个参数以空格分割 input()函数表示输入，将输入的内容作为返回值， 类型是字符串。 2 数据类型字符串的单引号和双引号的转移由\\完成。 12&gt;&gt;&gt; print('I\\'m \\\"OK\\\"!')I'm \"OK\"! 3 字符编码问题Python2好Python3有重大区别 3.1 Python3part one字符串是以Unicode编码的 也就是说，在程序输入过程中， 默认支持带格式的内容或者Unicode编码内容。 12&gt;&gt;&gt; print('包含中文的str')包含中文的str 12&gt;&gt;&gt; '\\u4e2d\\u6587''中文' 12&gt;&gt;&gt; print('包含\\u4e2d\\u6587的str')包含中文的str 相关内置函数 12345678&gt;&gt;&gt; ord('A')65&gt;&gt;&gt; ord('中')20013&gt;&gt;&gt; chr(66)'B'&gt;&gt;&gt; chr(25991)'文' part two如果涉及网络传输或者保存到文件， 会将str变为以字节为单位的bytes。 bytes的每个字符都只占用一个字节。 str在内存中以Unicode表示，一个字符对应若干个字节。 12x = 'ABC' # strx = b'ABC' # bytes str转换成bytes是用函数encode()， 需要传入编码类型。 12345678910&gt;&gt;&gt; 'ABC'.encode('ascii')b'ABC'&gt;&gt;&gt; '中文'.encode('utf-8')b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'&gt;&gt;&gt; '中文'.encode('ascii')Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) bytes转化为str使用函数decode()， 需要传入编码类型。 12345&gt;&gt;&gt; b'ABC'.decode('ascii')'ABC'&gt;&gt;&gt; b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')'中文' 附带参数可以忽略错误， errors=’ignore’。 12&gt;&gt;&gt; b'\\xe4\\xb8\\xad\\xff'.decode('utf-8', errors='ignore')'中' 3.2 Python24 函数4.1 函数参数4.1.1 位置参数4.1.2 默认参数123456789101112&gt;&gt;&gt; def apd(L=[]): L.append(\"end\") return L&gt;&gt;&gt; apd([1])[1, 'end']&gt;&gt;&gt; apd()['end']&gt;&gt;&gt; apd()['end', 'end'] 解释原因为： Python函数的默认参数在函数定义的时候已经生成了。 4.1.3 可变参数12345678910def calc(*numbers): sum = 0 for n in numbers: sum = sum + n * n return sumcalc(1, 3, 5, 7)nums = [1, 2, 3]calc(*nums) Python的解包会把序列内容解析出来。 解包，将后面的对象释放出来的行为。解包后得到的是一个序列。 4.1.4 关键字参数12def person(name, age, **kwargs): print('name:', name, 'age:', age, 'other:', kwargs) 4.1.5 命名关键字参数12def person(name, age, *, city, job): print(name, age, city, job) 命名关键字参数需要一个特殊分隔符，后面的参数被视为命名关键字参数。 4.1.6 参数顺序参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。 4.2 高阶函数如果一个函数的传入参数也是一个函数，那么这个函数就是一个高阶函数。 4.2.1 mapmap()函数接受两个参数， 一个是计算函数， 另一个是迭代器。 功能是不断取得迭代器中的返回值作为计算函数的传入参数，计算得到的值作为返回值。 12345678910&gt;&gt;&gt; def f(x): return x*x&gt;&gt;&gt; r = map(f, [1,2,3])&gt;&gt;&gt; r&lt;map object at 0x104abeb00&gt;&gt;&gt;&gt; list(r)[1, 4, 9] 4.2.2 reduceReduce()函数也是传入一个函数，一个迭代器。 功能和map不同的是， 第一次取得迭代器的两个值，传入函数得到结果，该结果和迭代器的下一个值继续传入函数中，不断循环计算直到计算完毕迭代器中的全部值。 12345678&gt;&gt;&gt; from functools import reduce&gt;&gt;&gt; def add(x, y):... return x + y...&gt;&gt;&gt; reduce(add, [1, 3, 5, 7, 9])25 应用map和reduce可以做到字符数字转化为整数。 123456789from functools import reduceDIGITS = &#123;'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9&#125;def char2num(s): return DIGITS[s]def str2int(s): return reduce(lambda x, y: x * 10 + y, map(char2num, s)) 4.2.3 filter同样传入两个参数， 一个函数一个可迭代对象。 功能类似map，不过该函数返回True该值保留，返回False该值不保留。 12345&gt;&gt;&gt; def is_odd(n): return n % 2 == 1&gt;&gt;&gt; list(filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15]))[1, 5, 9, 15] 4.2.4 sorted排序函数，传入一个序列，返回排序后的序列。原序列不发生改变。 参数key 12&gt;&gt;&gt; sorted([36, 5, -12, 9, -21], key=abs)[5, 9, -12, -21, 36] 相当于是map函数，key接受的是一个处理函数。之后对map函数的结果进行排序。 参数reverse 12345&gt;&gt;&gt; sorted([1,3,7,6])[1, 3, 6, 7]&gt;&gt;&gt; sorted([1,3,7,6], reverse=True)[7, 6, 3, 1] 默认是升序排列，改值默认值为False。 4.3 闭包12345678910111213141516def count(): fs = [] for i in range(1, 4): def f(): return i*i fs.append(f) return fsf1, f2, f3 = count()&gt;&gt;&gt; f1()9&gt;&gt;&gt; f2()9&gt;&gt;&gt; f3()9 像这种，函数内部嵌套函数， 嵌套函数调用函数局部变量，函数返回该嵌套函数，的函数就称为闭包。 闭包的特性是能够外部调用函数内容的函数，且使用到之前时候的局部变量。 在这个函数中，由于在完成count()的时候会遍历该for循环， 导致在调用f1()之前局部变量i已经等于3了。 4.4 lambda函数12345def num(x, y): return x * 10 + ylambda x, y: x * 10 + y 4.5 装饰器1234567891011def log(func): def wrapper(*args, **kw): print('call %s():' % func.__name__) return func(*args, **kw) return wrapper@logdef now(): print('2018-09-03') 执行过程： @log：执行到装饰器语法糖时; log(now): 会将装饰的函数作为参数; def wrapper(): 执行装饰器第一层内容; now = wrapper: 并将返回值设置成装饰的函数。 等价操作为： 1now = log(now) 如果需要在装饰器的时候传入参数。编写的装饰器需要再添加一层。 原因如下： @装饰器 这是个固定格式，要传入参数，就需要一个函数来接受，也就是说，需要在原有的基础上，使得 装饰器=函数(传入参数)。 12345678910111213141516def log(text): def decorator(func): def wrapper(*args, **kw): print('%s %s():' % (text, func.__name__)) return func(*args, **kw) return wrapper return decorator @log('execute')def now(): print('2015-3-25') # 等价于now = log('execute')(now)# now = log(now) # 这是之前 完整写法： 12345678import functoolsdef log(func): @functools.wraps(func) def wrapper(*args, **kw): print('call %s():' % func.__name__) return func(*args, **kw) return wrapper 4.6 偏函数123456789101112131415import functoolsint2 = functools.partial(int, base=2)# 相当于def int2(x, base=2): return int(x, base)max2 = functools.partial(max, 10)max2(1, 2, 6)# 相当于max(1, 2, 6, 10) 5 一些特性5.1 迭代通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。 5.2 列表生成式12345678&gt;&gt;&gt; [x * x for x in range(1, 11)][1, 4, 9, 16, 25, 36, 49, 64, 81, 100]&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0][4, 16, 36, 64, 100]&gt;&gt;&gt; [m + n for m in 'ABC' for n in 'XYZ']['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ'] 5.3 生成器一边循环一边计算的机制，称为生成器：generator。 123&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x10dd45ba0&gt; 输出生成器的内容使用函数next()。 同时生成器也是可迭代的。 使用yield可以编写生成器函数 12345678910111213141516171819202122232425def odd(): print('step 1') yield 1 print('step 2') yield(3) print('step 3') yield(5)&gt;&gt;&gt; o = odd()&gt;&gt;&gt; next(o)step 11&gt;&gt;&gt; next(o)step 23&gt;&gt;&gt; next(o)step 35&gt;&gt;&gt; next(o)Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;StopIteration 5.4 迭代器可以直接作用于for循环的可迭代对象， 叫做可迭代对象（Iterable）。 可以使用isinstance()判断一个对象是否是可迭代对象： 123&gt;&gt;&gt; from collections import Iterable&gt;&gt;&gt; isinstance([], Iterable)True 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。 6 面向对象6.1 特殊变量__name会被解释成_classname__name，进而形成私有变量。 _name表明是一个私有变量，虽然可以直接访问，但是约定俗成不要直接访问。 6.2 继承和多态继承后的类叫做子类。 被继承的类叫做父类，基类，超类。 子类获得了父类的全部功能。 多态，子类重写父类方法时，子类调用该方法会直接调用 子类自己的方法而不是父类的方法。 “鸭子类型”：在python（动态语言）中，如果限定参数必须是某类，不会像静态语言那样必须要求是该类和其子类。 只需要有对应的可执行的方法就行。也就是看起来像就行（file-like object）。 例子： 1234567891011121314class Animal(object): def run(self): print('Animal is running...') def run_twice(animal): animal.run() animal.run() class Timer(object): def run(self): print('Start...') # 这样的操作是可以的 run_twice(Timer()) 6.3 多重继承多重不断递进的方法通常是不可取的。 动物可能分哺乳动物和非哺乳动物，但是如果要区分爬行和飞行动物呢，可以不用继续继承，而是使用MixIn的方式。 123456class MyTCPServer(TCPServer, ForkingMixIn): pass class MyUDPServer(UDPServer, ThreadingMixIn): pass 6.4 特殊变量和方法6.4.1 __slots__1234567891011class Student(object): __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称 &gt;&gt;&gt; s = Student() # 创建新的实例&gt;&gt;&gt; s.name = 'Michael' # 绑定属性'name'&gt;&gt;&gt; s.age = 25 # 绑定属性'age'&gt;&gt;&gt; s.score = 99 # 绑定属性'score'Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;AttributeError: 'Student' object has no attribute 'score' 6.4.2 __len__()定义该方法之后，可以直接使用len(实例)。 6.4.3 __str__()和__repr__()print()输入实例的时候调用__str__()函数。 123&gt;&gt;&gt; s = Student('weihc')&gt;&gt;&gt; s&lt;__main__.Student object at 0x109afb310&gt; __repr__()用于改变这样的输出。 6.4.4 __iter__()和__next__()123456789101112class Fib(object): def __init__(self): self.a, self.b = 0, 1 # 初始化两个计数器a，b def __iter__(self): return self # 实例本身就是迭代对象，故返回自己 def __next__(self): self.a, self.b = self.b, self.a + self.b # 计算下一个值 if self.a &gt; 100000: # 退出循环的条件 raise StopIteration() return self.a # 返回下一个值 6.4.5 __getitem__()和__getattr__()1234567891011121314151617181920212223242526class Fib(object): def __getitem__(self, n): if isinstance(n, int): # n是索引 a, b = 1, 1 for x in range(n): a, b = b, a + b return a if isinstance(n, slice): # n是切片 start = n.start stop = n.stop if start is None: start = 0 a, b = 1, 1 L = [] for x in range(stop): if x &gt;= start: L.append(a) a, b = b, a + b return L &gt;&gt;&gt; f = Fib()&gt;&gt;&gt; f[0]1&gt;&gt;&gt; f[0:5][1, 1, 2, 3, 5] __getattr__()虽然函数名类似，但是功能完全不同。 当调用实例中不存在的属性的时候，会调用该方法。 123456789101112131415class Student(object): def __init__(self): self.name = 'weihc' def __getattr__(self, attr): if attr=='score': return 99&gt;&gt;&gt; s = Student()&gt;&gt;&gt; s.name'weihc'&gt;&gt;&gt; s.score99 6.4.6 __del__()析构函数。 调用del可能会触发改函数，会先判断引用计数是否为0了， 如果为0了就会执行。 在程序完成之后会执行该函数。 6.4.7 __enter__()和__exit__()12345678910111213141516class Foo: def __init__(self): pass def __enter__(self): return self def __exit__(self, exc_type, exc_val, exc_tb): print(exc_type, exc_val, exc_tb) return True # 出错之后程序不会中断 # return False # 出错之后程序会中断with Foo() as f: raise KeyError(\"ERROR\")print(\"done\") with的执行过程是： 创建Foo()对象，调用init(); 执行enter方法，返回值赋值给变量f； 执行with内容，出错或者执行完毕执行exit()方法。返回值为True程序继续执行。 6.5 元类6.5.1 基本形式元类的含义相当于是生成类的类。 在定义一个类的时候， 传入参数metaclass。 基本定义方式为： 12345678class ListMetaclass(type): def __new__(cls, name, bases, attrs): attrs['add'] = lambda self, value: self.append(value) return type.__new__(cls, name, bases, attrs)class MyList(list, metaclass=ListMetaclass): pass new()函数的四个参数分别是： 当前准备创建的类的对象； 类的名字； 类继承的父类集合； 类的方法集合 执行过程是， 在创建类MyList的时候调用ListMetaclass的new()方法。 其中要注意的是，创建带有元类的类的时候，会先遍历类的内容，在创建。 6.5.2 type正常使用type创建一个类可以使用： 1type('class_name', (object,), dict(class_func=fn)) 传入三个参数： 类名， 继承的父类集合， 方法名称与函数绑定集合。 6.5.3 __new__()和__init__()new()函数用于创建该类的实例。需要返回值。 init()函数用于初始化该类实例。 在new()函数正确执行且返回生成好的对象之后才执行，不需要返回值。 new()函数创建对象的方式， 一般是使用父类的new()创建。如： 1return type.__new__(cls, name, bases, attrs) 6.5.4 调用父类init方法1super(StringField, self).__init__(name, 'varchar(100)') super()函数传入两个参数，一个是当前类名，另一个是当前类的实例对象。 注意super函数需要传入实例对象。 使用super()函数而不是直接使用父类来直接调用函数还因为super()函数会处理多继承的问题。 7 测试7.1 单元测试编写测试类需要继承unittest.TestCase。 测试方法需要以test开头， 否则不会执行。 常用的判断测试的方法是： self.assertEqual(d.b, ‘test’) self.assertTrue(isinstance(d, dict)) with self.assertRaises(KeyError): value = d[‘empty’] 运行单元测试的方法： unittest.main() python -m unittest mydict_test， 注意只需要文件名， 没有后缀。 可以在单元测试中编写两个特殊的setUp()和tearDown()方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。 123456789import unittestclass TestDict(unittest.TestCase): def test_init(self): d = Dict(a=1, b='test') self.assertEqual(d.a, 1) self.assertEqual(d.b, 'test') self.assertTrue(isinstance(d, dict)) 7.2 文档测试1234import doctestdoctest.testmod()","categories":[{"name":"python","slug":"python","permalink":"http://weihuchao.top/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://weihuchao.top/tags/python/"},{"name":"基础","slug":"基础","permalink":"http://weihuchao.top/tags/基础/"}]},{"title":"python解释器","slug":"解释器","date":"2018-08-31T16:00:00.000Z","updated":"2018-09-01T13:46:42.000Z","comments":true,"path":"2018/09/01/解释器/","link":"","permalink":"http://weihuchao.top/2018/09/01/解释器/","excerpt":"","text":"1 Python的常用解释器CPython官方版本的解释器：CPython。 这个解释器是用C语言开发的，所以叫CPython。 默认在命令行下运行python就是启动CPython解释器。 CPython是使用最广的Python解释器 IPythonIPython是基于CPython之上的一个交互式解释器，只是在交互方式上有所增强。 CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。 PyPyPyPy是另一个Python解释器，它的目标是执行速度。 PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。 绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。 JythonJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。 IronPythonIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。 2 解释 提前编译 实时编译提前（AOT）编译编译高级编程语言为对应的机器代码， 以便生成的二进制文件可以本机执行。 解释解释是直接执行脚本语言， 而不需要事先将它们编译成机器语言。 解释器的主要缺点是解释程序通常比编译时运行得慢。 解释器通常使用以下策略之一来执行程序： 解析的源代码，并直接执行其行为; 将源代码转换为一些有效的中间表示并立即执行此操作; 显式执行由编译器生成的存储的预编译代码，编译器是解释器系统的一部分。 术语“ 解释语言 ”或“ 编译语言 ”表示该语言的规范实现分别是解释器或编译器。 实时（JIT）编译涉及程序执行期间的编译。 实时编译系统通常的做法是，连续地分析正在执行的代码，并识别代码的一部分，从而得到加速。且编译或重新编译获得的加速比将超过编译该代码的开销。 JIT编译结合了编译代码的速度和解释的灵活性，以及​解释器的开销和编译的额外开销（而不仅仅是解释）。 理论上，JIT编译可以比静态编译产生更快的执行速度。 3 CPython和PyPy之间的差异详见","categories":[{"name":"python","slug":"python","permalink":"http://weihuchao.top/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://weihuchao.top/tags/python/"},{"name":"解释器","slug":"解释器","permalink":"http://weihuchao.top/tags/解释器/"}]},{"title":"夏の幻-Garnet Crow","slug":"夏之幻-Garnet Crow","date":"2018-08-20T16:00:00.000Z","updated":"2018-09-01T04:29:18.000Z","comments":true,"path":"2018/08/21/夏之幻-Garnet Crow/","link":"","permalink":"http://weihuchao.top/2018/08/21/夏之幻-Garnet Crow/","excerpt":"","text":"部屋(へや)の窓(まど)の向(む)こうにへやのまどのむこうに飞行机云(ひこうきぐも)を なぞってひこうきぐもを なぞって今日(きょう)ケンカした君(きみ)の事(こと)ばかり考(かんが)えてた 些细(ささい)な事(こと)で戸惑(とまど)って不安定(ふあんてい)で无防备(むぼうび)なあの顷(ころ)のようにすぐに电话(でんわ)して笑(わら)い合(あ)えたらいいのにね 近(ちか)づいて来(く)る 至福(しふく)の时(とき)は痛(いた)みを伴(ともな)いながら足音(あしおと)をたてる考(かんが)えすぎて深(ふか)みにハマる君(きみ)の傍(そば)にいるのに 夏(なつ)の幻(まぼろし)瞳闭(ひとみと)じて一番最初(いちばんさいしょ)に君(きみ)を思(おも)い出(だ)すよいつか终(お)わる儚(はかな)い生命(ゆめ)にただ こみあげる気持(きも)ちい抱(だ)いた 世界(せかい)は広(ひろ)く知(し)らない事溢(ことあふ)れてて自分(じぶん)さえ见失(みうしな)いそうだけど君(きみ)と生(い)きてゆきたいからとまどいながらでもいいつないだ手(て)を离(はな)さないでね 强(つよ)いオフショア波(なみ)を待(ま)ってた中途半端(ちゅうとはんぱ)に离(はな)れて流(なが)されてゆくよ进化(しんか)してゆく时代(じだい)の中(なか)で同(おな)じものを求(もと)めて 夏(なつ)の幻(まぼろし)想(おも)うだけで胸(むね)が热(あつ)くなれた奇迹(きせき)の途中(とちゅう)愿(ねが)うだけじゃ 届(とど)かぬくらいこぼれ落(お)ちそうな気持(きも)ち抱(だ)いた どうして二人(ふたり)近(ちか)づく程(ほど)远(とお)く感(かん)じて 不安(ふあん)になるんだろうキョリを超(こ)えた 欲望(よくぼう)があふれて一人(ひとり) 部屋(へや)のなかで君(きみ)の温(ぬく)もり想(おも)う どんな日(ひ)にも瞳闭(ひとみと)じて一番最初(いちばんさいしょ)に 君(きみ)を思(おも)い出(だ)すよいつか终(お)わる儚(はかな)い生命（ゆめ）にただ こみあげる気持(きも)ち抱(だ)いた 忘(わす)れないから…消(き)えゆく幻(まぼろし)に君(きみ)と并(なら)んでいたね夏(なつ)の终(お)わり阳射(ひざ)しがゆれてる海(うみ)の底(そこ)のような手(て)のひらの中(なか)の街并(まちなみ) I like a dreamI’m calling out to you","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"大唐玄怪来谒-肥皂菌","slug":"大唐玄怪来谒-肥皂菌","date":"2018-07-07T16:00:00.000Z","updated":"2018-07-07T11:59:32.000Z","comments":true,"path":"2018/07/08/大唐玄怪来谒-肥皂菌/","link":"","permalink":"http://weihuchao.top/2018/07/08/大唐玄怪来谒-肥皂菌/","excerpt":"","text":"歌词A文翰初议周隋 再话旧唐以尺墨安定狐媚平生偏好奇诡 又易食髓知味秉夜烛 诗邀神鬼听说落魄书生 杜氏子春虎皮上两世长梦 成仙或为人他已识门道九分 偏情字入骨深 清夜慎持明烛台 它亦吟得词句入怀大唐遍出诗才 待我坐镇云峰台千里紫霞参拜 引鹤来剑指乌妖一当百 身性刚正怎怕污邪侵害只把酒此生付慷慨 喝完披朱衣再去游炎海 B笔触刺骨几分 毫若青锋如凡俗入骨几寸 最难罢品红尘异事易勾瘾症上酒卮 劳君多论时人文章评批 非不靡丽却可惜殊少骨气 不如拂袖去练绝这一手棋技 普世人桔中戏 当心红鬼鸣鼓钟提柄长剑叩你颈痛方知善恶有终上元广陵景最浓 由我乘驾天虹 彩云中敢凭纸符救白龙并非是我 醉得太过放纵只爱煞一生逞英雄不叹匆匆 真君子不言怪 C自诩假小人尽可谈的开怀因我解下绣龙裳 世间无人敢自称王犯我半分张狂 挑亮烛光点鬼将推杯豪饮琼浆 祭参商扬手呼童请明皇 突觉喉中酒烈吐出金蟒 吞山河胸胆正开张容我 怒书这一卷说盛唐","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"e of s-泽野弘之","slug":"e of s-泽野弘之","date":"2018-07-07T16:00:00.000Z","updated":"2018-07-07T15:11:11.000Z","comments":true,"path":"2018/07/08/e of s-泽野弘之/","link":"","permalink":"http://weihuchao.top/2018/07/08/e of s-泽野弘之/","excerpt":"","text":"各个平台的歌词都不一样，泽野大大的歌词一向生僻，google到的歌词和听到的总有差异。因此给出两个版本的歌词:一个是我慢放歌一遍一遍听出来的歌词， 纯平假名。一个是我在lyrical-nonsense.com看到的歌词。 纯平假名听出来的歌词Aぼくおけしてえ たつみの がれのおあらす ほど ちのねに おびえるこだわりのないきばでどこお とがめてもてすりも つかめやしないいばしょおよ けいも とめるさけも end of sound だれもいないさわいだ げんそに こたえた りてのわるどむげんのSTAGEと いかりだけごみかせない らせんのご めざめたていこ Bさめたまちの あかりがと もしてもきずの いろ いた みわ わからないりくつなぎお かかげ ばせいおふらしてもあしもと みず だらけことばの せいで きまるこたえない いない だれもいないかわいた かんじょで ぎせいなった ちじょのtearsくだいた そらえ さけんでもたたかえない むりょなえ すなになえいこ Cそこにだれもいないさわいだ げんそすで きえてった りていくのわるどむげんのSTAGEと いかりだけごみかせない らせんのご めざめたていこ 网上的歌词「僕」を消して得た「罪逃れの王」荒らすほど地の音に怯える拘りの無い牙で どこを咎めても手すりも掴めやしない居場所を余計求める叫ぶも end of sound“boku” o keshite eta “tsumi nogare no ou”arasu hodo chi no oto ni obierukodawari no nai kiba de doko o togametemotesuri mo tsukame ya shinaiibasho o yokei motomerusakebu mo end of sound 誰もいない騒いだ幻想に答えて得たリテイクのワールド無限のSTAGEと怒りだけ誤魔化せない螺旋の業 目覚めた抵抗daremo inaisawaida gensou ni kotaete eta riteiku no waarudomugen no STAGE to ikari dakegomakasenai rasen no gou mezameta teikou 覚めた街の明かりが灯しても傷の色・痛みは解らない理屈な義を掲げ罵声を降らしても足元水だらけsameta machi no akari ga tomoshitemokizu no iro ・ itami wa wakaranairikutsu na gi o kakage basei o furashitemoashimoto mizu darake 言葉の精度で決まる答えなどいらないkotoba no seido de kimarukotae nado iranai 誰もいない乾いた感情で犠牲になった地上のtears砕いた空へ叫んでも戦えない無力なエゴ 砂になる栄光daremo inaikawaita kanjou de gisei ni natta chijou no tearskudaita sora e sakendemotatakaenai muryoku na ego suna ni naru eikou 誰もいない騒いだ幻想を捨て消えてったリテイクのワールド無限のSTAGEと怒りだけ誤魔化せない螺旋の業 目覚めた抵抗daremo inaisawaida gensou o sute kietetta riteiku no waarudomugen no STAGE to ikari dakegomakasenai rasen no gou mezameta teikou","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"不朽之罪-双笙","slug":"不朽之罪-双笙","date":"2018-07-07T16:00:00.000Z","updated":"2018-07-07T13:13:08.000Z","comments":true,"path":"2018/07/08/不朽之罪-双笙/","link":"","permalink":"http://weihuchao.top/2018/07/08/不朽之罪-双笙/","excerpt":"","text":"歌词A打乱的骨牌 习惯盲目依赖↑以坦然姿态 等风来→鞋跟下青苔 爬满拖地裙摆→神的福音被隔|绝窗外↑ 天平支点倾斜 自尊将我打败不安的窘态 在作怪我熟知的年代还能区分黑白无需卖弄心|机耍赖 为谁深陷不知往返的迷恋未曾认清这个世界我听到权力之争彻夜不歇街尾血香|愈显浓烈 B空间接应点 于囚笼中调（diao）配密封的花蕊 正枯萎听断线傀儡 晚安留在句尾僵硬的思维筛选错对 天平支点倾斜 自尊将我打败不安的窘态 在作怪我熟知的年代 还能区分黑白无需卖弄心|机耍赖 为谁深陷不知往返的迷恋未曾认清这个世界我听到权力之争彻夜不歇街尾血香|愈显浓烈 C甘愿臣服于谁 立忠诚之碑重叠暗夜又一番教诲结局早已无谓明与灭 滞留病态的美 D为谁深陷不知往返的迷恋为谁认清这个世界我听到权力之争彻夜不歇街尾血香|显浓烈 打乱的骨牌 习惯盲目依赖（为谁深陷不知往返的迷恋） 以坦然姿态 等风来（未曾认清这个世界） 让断线傀儡 晚安留在句尾（我听到权力之争彻夜不歇） 僵硬的思维筛选错对（街尾血香愈显浓烈)","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"高飞-张杰","slug":"高飞-张杰","date":"2018-07-07T16:00:00.000Z","updated":"2018-07-07T12:52:46.000Z","comments":true,"path":"2018/07/08/高飞-张杰/","link":"","permalink":"http://weihuchao.top/2018/07/08/高飞-张杰/","excerpt":"","text":"歌词A奔跑穿越无尽的荒原逐梦的脚步突然停歇无边断崖 横在眼前我懂 我要 蜕变 偶尔想起温暖的昨天为了梦想不再留恋新的起点就在眼前我已做好准备 我要高飞 到天空的顶点我要飞到无人能及的视界飞得再累 不准自己跌坠直到太阳就在我的指尖 我要高飞 到世界的边缘我要飞越没人到达的绝对不到终点 不准流下眼泪要把最震撼的呐喊留在灿烂瞬间 B偶尔想起温暖的昨天为了梦想不再留恋新的起点就在眼前我已做好准备 我要高飞 到天空的顶点我要飞到无人能及的视界飞得再累 不准自己跌坠直到太阳就在我的指尖 我要高飞 到世界的边缘我要飞越没人到达的绝对不到终点 不准流下眼泪要把最震撼的呐喊留在 C我要高飞 到天空的顶点我要飞到无人能及的视界飞得再累 不准自己跌坠直到太阳就在我的指尖 我要高|飞 到世界的边缘我要飞越没人到达的绝对不到终|点 不准流下眼泪要把最震撼的呐喊留在灿烂瞬间 灿烂瞬间","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"千里之外-周杰伦","slug":"千里之外-周杰伦","date":"2018-07-07T16:00:00.000Z","updated":"2018-09-01T03:55:43.000Z","comments":true,"path":"2018/07/08/千里之外-周杰伦/","link":"","permalink":"http://weihuchao.top/2018/07/08/千里之外-周杰伦/","excerpt":"","text":"歌谱 歌词A屋檐如悬崖 风铃如沧海我等燕归来时间被安排 演一场意外你悄然走开 故事在城外 浓雾散不开看不清对白你听不出来 风声不存在是我在感慨 梦醒来 是谁在窗台 把结局打开那薄如蝉|翼的未来经不起谁来拆 我送你离开 千里之外你无声黑白沉默年代 或许不该太遥远的相爱 我送你离开 天涯之外你是否还在琴声何来 生死难猜用一生去等待 B一身琉璃白 透明着尘埃你无瑕的爱你从雨中来 诗化了悲哀我淋湿现在 芙蓉水面采 船行影犹在你却不回来被岁月覆盖 你说的花开过去成空白 梦醒来 是谁在窗台 把结局打开那薄如蝉|翼的未来经不起谁来拆 我送你离开 千里之外你无声黑白沉默年代 或许不该太遥远的相爱 我送你离开 天涯之外你是否还在琴声何来 生死难猜用一生 （没有去等待） C我送你离开 千里之外你无声黑白沉默年代 或许不该太遥远的相爱 我送你离开 天涯之外你是否还在琴声何来 生死难猜用一生去等待","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"青花瓷-周杰伦","slug":"青花瓷-周杰伦","date":"2018-07-07T16:00:00.000Z","updated":"2018-09-01T03:55:43.000Z","comments":true,"path":"2018/07/08/青花瓷-周杰伦/","link":"","permalink":"http://weihuchao.top/2018/07/08/青花瓷-周杰伦/","excerpt":"","text":"歌谱","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"七里香-周杰伦","slug":"七里香-周杰伦","date":"2018-07-07T16:00:00.000Z","updated":"2018-07-07T13:27:31.000Z","comments":true,"path":"2018/07/08/七里香-周杰伦/","link":"","permalink":"http://weihuchao.top/2018/07/08/七里香-周杰伦/","excerpt":"","text":"歌词A窗外的麻雀 在电线杆上多嘴你说这一句 很有夏↓天的感觉手中的铅笔 在纸上来来回回我|用几行字 形容你是我的谁 秋刀鱼的滋味 猫跟你都想了解初恋的香味 就这样被我^们寻回那温暖的阳光 像刚摘的鲜艳草莓你说你舍不得吃掉 这一种感觉 雨下整夜 我的爱溢出就像雨水院子落叶 跟我的思念厚厚一叠几句是非 也无法将我的热情冷却你出现在我诗的每一页 雨下整夜 我的爱溢出就像雨水窗台蝴蝶 像诗里纷飞的美丽章节我接着写 把永远爱你写进诗的结尾你是我唯一想要的了解 B雨下整夜 我的爱溢出就像雨水院子落叶 跟我的思念厚厚一叠几句是非 也无法将我的热情冷却你出现在我诗的每一页 那饱满的稻穗 幸福了~这个季节而你的脸颊 像田里熟透的蕃茄你突然|对我说 七里香的|名字很美我此刻却只想亲吻你倔强的嘴 C雨下整夜 我的爱溢出就像雨水院子落叶 跟我的思念厚厚一叠几句是非 也无法将我的热情冷却你出现在我诗的每一页 整夜我的爱溢出就像雨水窗台蝴蝶 像诗里↑纷飞的美丽~章节我接着写 把永远爱你写进诗的结尾你是我唯一想要的了解 结构A（麻雀）B（秋刀鱼）C（院子落叶）C（窗台蝴蝶） C（院子落叶）B（稻穗） C（院子落叶）C（窗台蝴蝶）","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"安静-周杰伦","slug":"安静-周杰伦","date":"2018-07-07T16:00:00.000Z","updated":"2018-07-07T11:55:22.000Z","comments":true,"path":"2018/07/08/安静-周杰伦/","link":"","permalink":"http://weihuchao.top/2018/07/08/安静-周杰伦/","excerpt":"","text":"歌词A只剩下钢琴陪我谈了一天睡著的大提琴 安静的旧旧的我想你已表现的非常明白我懂我也知道 你没有舍不得 你说你也会难过我不相信牵著你陪著我 也只是曾经希望他是真的比我还要爱你我才会逼自己离开 B你要我说多难堪 我根本不想分开为什么还要我用微笑来带过我没有这种天份 包容你也接受他不用担心的太多 我会一直好好过 你已经远远离开 我也会慢慢走开为什么我连分开都迁就著你我真的没有天份 安（B3两个音）静的没这么快我会学著放弃你 是因为我太爱你 结构AB AB B","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"父亲-筷子兄弟","slug":"父亲-筷子兄弟","date":"2018-07-07T16:00:00.000Z","updated":"2018-09-01T03:55:43.000Z","comments":true,"path":"2018/07/08/父亲-筷子兄弟/","link":"","permalink":"http://weihuchao.top/2018/07/08/父亲-筷子兄弟/","excerpt":"","text":"歌谱 歌词A总是向你索取 却不曾说谢谢你直到长大以后 才懂得你不容易每次离开总是 装作轻松的样子微笑着说回去吧 转身泪湿眼底 多想和从前一样 牵你温暖手掌可是你不在我身旁 托清风捎去安康 时光时光慢些吧 不要再让你变老了我愿用我一切 换你岁月长留一生要强的爸爸 我能为你做些什么微不足道的关心 收下吧 谢谢你做的一切 双手撑起我们的家总是竭尽所有 把最好的给我我是你的骄傲吗 还在为我而担心吗你牵挂的孩子啊 长大啦 B多想和从前一样 牵你温暖手掌可是你不在我身旁 托清风捎去安康 时光时光慢些吧 不要再让你变老了我愿用我一切 换你岁月长留一生要强的爸爸 我能为你做些什么微不足道的关心 收下吧 谢谢你做的一切 双手撑起我们的家总是竭尽所有 把最好的给我我是你的骄傲吗 还在为我而担心吗你牵挂的孩子啊 长大啦 C时光时光慢些吧 不要再让你变老啦我愿用我一切 换你岁月长留我是你的骄傲吗 还在为我而担心吗你牵挂的孩子啊 长大啦 感谢一路上有你","categories":[{"name":"Music","slug":"Music","permalink":"http://weihuchao.top/categories/Music/"}],"tags":[{"name":"歌词","slug":"歌词","permalink":"http://weihuchao.top/tags/歌词/"},{"name":"音乐","slug":"音乐","permalink":"http://weihuchao.top/tags/音乐/"}]},{"title":"MongoDB","slug":"MongoDB","date":"2018-07-06T16:00:00.000Z","updated":"2018-07-06T16:30:10.000Z","comments":true,"path":"2018/07/07/MongoDB/","link":"","permalink":"http://weihuchao.top/2018/07/07/MongoDB/","excerpt":"","text":"1 官方文档及相关文档官方文档 2 部署相关1) 安装ubuntu安装 2) 命令1234567891011# 启动sudo service mongod stop# 重启sudo service mongod restart# 关闭sudo service mongod stop# 移除sudo apt-get purge mongodb-org* 3 常用使用1）基础使用123456789101112131415# 连接数据库mongo --host 192.168.199.9mongo --host 127.0.0.1:27017# 查看当前数据库db# 查看所有数据库show dbs# 使用数据库use weihc# 查看所有文档show collections 2） 查询1234567891011121314151617# 基础查询(美化显示)db.player.find()db.player.find().pretty()# 如果collection的名字特殊db.getCollection(\"3 test\").find()db.getCollection(\"3-test\").find()db.getCollection(\"stats\").find()# 过滤查询db.player.find(&#123;\"_id\": 1&#125;).pretty()# 查询并过滤结果db.player.find(&#123;\"_id\": 1&#125;, &#123;\"nickname\": 1&#125;).pretty()# 加上判断条件db.player.find(&#123;\"_id\": 1, \"log_time\": &#123;$gt: 1530894156&#125;&#125;, &#123;\"nickname\": 1&#125;).pretty()","categories":[{"name":"Work","slug":"Work","permalink":"http://weihuchao.top/categories/Work/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://weihuchao.top/tags/笔记/"},{"name":"Work","slug":"Work","permalink":"http://weihuchao.top/tags/Work/"},{"name":"Database","slug":"Database","permalink":"http://weihuchao.top/tags/Database/"}]},{"title":"Hello World！","slug":"Helloworld","date":"2018-05-20T03:49:55.000Z","updated":"2018-05-25T15:03:18.000Z","comments":true,"path":"2018/05/20/Helloworld/","link":"","permalink":"http://weihuchao.top/2018/05/20/Helloworld/","excerpt":"","text":"国际惯例，第一篇送Hello World。 1 此刻每个人都有自己独特之处，或许在尝试某一件事情的时候， 你就会发现你或许比别人在这件事情上更加的游刃有余，或许是学的更快，或许是学得更牢。 小时候，还记得我对文字的感受力，或许我记得不牢，但是我脑子里能突然浮现一下不曾接触的词语和概念。 那时我以为是潜移默化，也感叹人类的传承。 时至今日，那样少有的灵性已经不再。 更多的是，疲于奔命，安于现状。 2 习惯我有一个不好的习惯， 总是我脑内限定的条件下执行某一件事情。 比如说我可能会需要一个更大的屏幕来显示，借此我才能够看到完整的一个网页，这样我就可以心满意足的去强化记忆网页当中的知识。 同样记笔记也是，我总是努力保证自己的笔记的格式是最好最清晰的， 这样才能方便我下次阅读。然而事实是由于我为了做到排版精致的笔记，可能会在同一个知识点上浪费过多的时间，且专注点还不在知识点上。后果就是我花了一些“无用”去完成熟记知识点的前提，效率甚低。最可怕的是，或许我会对自己的笔记产生厌恶，因而对阅读笔记毫无欲望… 3 改变我知道，从很小就发现我和别人的脑回路不一样。 但是人始终是立足于社会的。我正努力改变自己，让自己更加适应社会，不显得那么突兀。 于是， 在改变前，我为自己又“谋划”了新的条件。 4 520很羡慕， 非常羡慕那些能够遇到志同道合，气味相投的另一半还幸福的在一起的人。 很遗憾，我曾经遇到过那样的人。不过理智告诉我，不是因为别人适合我，而是别人足够优秀。 但是遗憾的人生还要继续，还是微笑着努力变得优秀吧。 520，iMac，我给我自己送的礼物，希望我喜欢，希望我能迈出心里上的第一步。 5 秘密我有一个小秘密，我同样为自己“设立”了一个条件。 希望有一天我能说出来。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://weihuchao.top/categories/随笔/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://weihuchao.top/tags/随笔/"}]},{"title":"Hexo博客的构建之路","slug":"Hexo博客的构建","date":"2018-05-20T03:24:53.000Z","updated":"2018-05-26T12:24:16.000Z","comments":true,"path":"2018/05/20/Hexo博客的构建/","link":"","permalink":"http://weihuchao.top/2018/05/20/Hexo博客的构建/","excerpt":"","text":"1 介绍hexo是基于node.js的。 它可用于创建博客， 且操作十分方便。 也可以和github关联，提交上自动生成的静态文件，配置之后任何人都可以轻松访问创建好的博客了。 地址不够酷炫没关系，购买一个域名来绑定给我们的博客。 页面不够酷炫没关系，还有一大波的主题等着我们应用。 2 安装Hexo 安装node.js http://nodejs.cn/ 安装hexo 1npm install -g hexo 初始化hexo 注意这会在当前目录下生成hexo所需的内容，所以选定好一个合适的位置 1hexo init (可选) 安装hexo的插件 虽然是可选但是安装完之后不会报一些因为缺插件导致的错误比如缺少hexo-deployer-git在hexo d的时候就会找不到git 12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save 启动hexo查看效果 12hexo ghexo s g对应的是generates对应的是server执行之后就可以访问 http://localhost:4000/ 查看效果了 3 添加文章可以直接在项目/source/_posts 下直接创建需要的md文件即可注意：md文件头部需要有一下信息， 来配置文章的标题、创建时间、tag、分类等内容 123456---title: 我是标题categories: 我是分类tags: - 我是tag--- 4 创建关于我 在项目路径下执行 1hexo new page &quot;about&quot; 实际上就是生成了 项目/source/about/index.md 文件 编辑index.md文件的内容 修改 项目/themes/next/_config.yml 文件 123456menu: home: / || home about: /about/ || user # 去掉这个位置的注释就可以了# tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive 5 创建分类 在项目中执行命令 1hexo new page &quot;categories&quot; 同样，会创建 项目/source/categories/index.md 文件 修改index.md文件 12345---title: 分类date: 2018-03-31 16:24:24type: categories--- 其中需要title的内容会被显示到页面type必须要加上， 这样Hexo才会自动生成分类的内容 和创建关于我一样，需要修改配置文件 6 与gitbu关联 获取git账号 创建一个repository注意名字必须是 你的github用户.github.io 在本地配置好git 12git config --global user.name &quot;whims&quot;git config --global user.email &quot;whimswei@163.com&quot; 创建SSH秘钥 123cd ~/.sshssh-keygen -t rsa -C “whimswei@163.com”cat id_rsa.pub 添加到git上 头像 -&gt; setting -&gt; SSH and GPG keys -&gt; new SSH key -&gt; Title自己定，Key输入id_rsa.pub的内容 配置hexo 配置项目/_config.conf 1234deploy: type: git repo: 仓库地址 branch: 分支（一般是master） 推送到git 1hexo d d对应deploy 7 绑定域名 本地项目的修改 创建文件 /source/CNAME 内容为域名 git上的修改 头像 -&gt; your profile -&gt; 项目 -&gt; setting -&gt; GitHub Pages -&gt; Custom domain 输入域名 8 （主题）Favicon 用小篆字体， 推荐网站 地址为 /source/favicon.jpg 对应主题配置 1favicon: /favicon.jpg 9 （主题）Share页面的配置文件位置为/layout/_partial/post/share.ejs 123456789&lt;div class=\"bdsharebuttonbox\"&gt; &lt;!--&lt;a href=\"#\" class=\"fa fa-twitter bds_twi\" data-cmd=\"twi\" title=\"分享到推特\"&gt;&lt;/a&gt;--&gt; &lt;!--&lt;a href=\"#\" class=\"fa fa-weibo bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"&gt;&lt;/a&gt;--&gt; &lt;a href=\"#\" class=\"fa fa-weixin bds_weixin\" data-cmd=\"weixin\" title=\"生成文章二维码\"&gt;&lt;/a&gt; &lt;a href=\"#\" class=\"fa fa-qq bds_sqq\" data-cmd=\"sqq\" title=\"分享给 QQ 好友\"&gt;&lt;/a&gt; &lt;a href=\"#\" class=\"fa fa fa-envelope-o bds_mail\" data-cmd=\"mail\" title=\"通过邮件分享\"&gt;&lt;/a&gt; &lt;a href=\"#\" class=\"fa fa-files-o bds_copy\" data-cmd=\"copy\" title=\"复制网址\"&gt;&lt;/a&gt; &lt;!--&lt;a href=\"#\" class=\"fa fa-share-alt bds_more\" data-cmd=\"more\"&gt;&lt;/i&gt;&lt;/a&gt;--&gt; &lt;/div&gt; 10 （主题）页底优化文件位置/layout/_partial/footer.ejs 1234567891011121314151617181920212223242526272829303132&lt;footer id=\"footer\"&gt; &lt;div class=\"outer\"&gt; &lt;div id=\"footer-info\"&gt; &lt;div class=\"footer-left\"&gt; &lt;i class=\"fa fa-copyright\"&gt;&lt;/i&gt; &lt;% if (theme.since &amp;&amp; !isNaN(theme.since) &amp;&amp; theme.since &lt; date(new Date(), 'YYYY')) &#123; %&gt;&lt;%- theme.since%&gt;-&lt;% &#125; %&gt;&lt;%= date(new Date(), 'YYYY') %&gt; &lt;%= config.author || config.title %&gt; &lt;/div&gt; &lt;!--&lt;div class=\"footer-right\"&gt;--&gt; &lt;!--&lt;a href=\"http://hexo.io/\" target=\"_blank\" title=\"&lt;%= __('tooltip.Hexo') %&gt;\"&gt;Hexo&lt;/a&gt; Theme &lt;a href=\"https://github.com/MOxFIVE/hexo-theme-yelee\" target=\"_blank\" title=\"&lt;%= __('tooltip.Yelee') %&gt; v&lt;%= theme.Yelee %&gt;\"&gt;Yelee&lt;/a&gt; by MOxFIVE &lt;i class=\"fa fa-heart animated infinite pulse\"&gt;&lt;/i&gt;--&gt; &lt;!--&lt;/div&gt;--&gt; &lt;/div&gt; &lt;!--&lt;% if (theme.visit_counter.on) &#123; %&gt;--&gt; &lt;!--&lt;div class=\"visit\"&gt;--&gt; &lt;!--&lt;% if (theme.visit_counter.site_visit) &#123; %&gt;--&gt; &lt;!--&lt;span id=\"busuanzi_container_site_pv\" style='display:none'&gt;--&gt; &lt;!--&lt;span id=\"site-visit\" title=\"&lt;%= __('visit_counter.site') %&gt;\"&gt;&lt;i class=\"fa fa-user\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;--&gt; &lt;!--&lt;/span&gt;--&gt; &lt;!--&lt;/span&gt;--&gt; &lt;!--&lt;% &#125; %&gt;--&gt; &lt;!--&lt;% if (theme.visit_counter.site_visit &amp;&amp; theme.visit_counter.page_visit) &#123; %&gt;--&gt; &lt;!--&lt;span&gt;| &lt;/span&gt;--&gt; &lt;!--&lt;% &#125; %&gt;--&gt; &lt;!--&lt;% if (theme.visit_counter.page_visit) &#123; %&gt;--&gt; &lt;!--&lt;span id=\"busuanzi_container_page_pv\" style='display:none'&gt;--&gt; &lt;!--&lt;span id=\"page-visit\" title=\"&lt;%= __('visit_counter.page') %&gt;\"&gt;&lt;i class=\"fa fa-eye animated infinite pulse\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;span id=\"busuanzi_value_page_pv\"&gt;&lt;/span&gt;--&gt; &lt;!--&lt;/span&gt;--&gt; &lt;!--&lt;/span&gt;--&gt; &lt;!--&lt;% &#125; %&gt;--&gt; &lt;!--&lt;/div&gt;--&gt; &lt;!--&lt;% &#125; %&gt;--&gt; &lt;/div&gt;&lt;/footer&gt; 11 更多内容 HEXO官方中文文档 HEXO主题 主题文档 推荐主题 https://vevlins.github.io/ https://blog.meiqiu.me/2017/12/18/mysql-tips/ http://hejx.space/ http://www.yujunren.com/blog/ https://hcyue.me/ https://geekplux.com/ 总结自此就完成了一个可以快捷发表文章，任何人可以通过指定域名访问， 界面美观大方的博客网站。 接下来就是熟悉Markdown的语法，把文章的布局格式控制的更加精确，还有学习一些前端知识对页面进行改良甚至做成模板供大家使用，最终就是努力学习写出更好的博客内容。","categories":[{"name":"笔记","slug":"笔记","permalink":"http://weihuchao.top/categories/笔记/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://weihuchao.top/tags/笔记/"},{"name":"Hexo","slug":"Hexo","permalink":"http://weihuchao.top/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"http://weihuchao.top/tags/博客/"}]},{"title":"MacOS系统初始化","slug":"初始化macOS","date":"2018-05-19T16:00:00.000Z","updated":"2018-09-01T03:55:43.000Z","comments":true,"path":"2018/05/20/初始化macOS/","link":"","permalink":"http://weihuchao.top/2018/05/20/初始化macOS/","excerpt":"","text":"1 基础软件 网易云音乐 QQ Wechat 为知笔记 有道词典 邮箱大师 BatterZip MPlayer TotalFinder TeamViewer Lantern &amp; NordVPN (选择下载OpneVPN) VMware Navicat Premium Microsoft Office 2 Pycharm License Server http://wolf.3dxtras.com http://idea.lanyus.com/ http://xidea.online 字体大小 编辑区的字体和背景 背景颜色 设置指定后缀的文件的Editor， 这样就可以轻松提醒和注释等操作了 3 Terminal 安装oh-my-zsh 1wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 创建alias 配置文件为 ~/.zshrc 一些博主推荐的alias 1234567891011121314151617alias cls='clear'alias ll='ls -l'alias la='ls -a'alias vi='vim'alias javac=\"javac -J-Dfile.encoding=utf8\"alias grep=\"grep --color=auto\"alias -s html=mate # 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开alias -s rb=mate # 在命令行直接输入 ruby 文件，会在 TextMate 中打开alias -s py=vi # 在命令行直接输入 python 文件，会用 vim 中打开，以下类似alias -s js=vialias -s c=vialias -s java=vialias -s txt=vialias -s gz='tar -xzvf'alias -s tgz='tar -xzvf'alias -s zip='unzip'alias -s bz2='tar -xjvf' 设置皮肤 偏好设置 -&gt; 描述文件 -&gt; Novel -&gt; 字体 -&gt; 更改 -&gt; 默认 解决破解软件无法打开的问题 1sudo spctl --master-disable 4 QQ浏览器 Adblock Plus Onetab 谷歌翻译 手势 5 搜狗输入法 中英文标点 外观-主题-候选词个数-9 6 使用Airport同步数据","categories":[{"name":"笔记","slug":"笔记","permalink":"http://weihuchao.top/categories/笔记/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://weihuchao.top/tags/笔记/"},{"name":"Mac","slug":"Mac","permalink":"http://weihuchao.top/tags/Mac/"}]}]}