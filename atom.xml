<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>魏胡超</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weihuchao.top/"/>
  <updated>2018-10-06T14:49:43.000Z</updated>
  <id>http://weihuchao.top/</id>
  
  <author>
    <name>魏胡超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>同步和异步</title>
    <link href="http://weihuchao.top/2018/10/06/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/"/>
    <id>http://weihuchao.top/2018/10/06/同步和异步/</id>
    <published>2018-10-06T14:49:43.000Z</published>
    <updated>2018-10-06T14:49:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-同步模型"><a href="#1-同步模型" class="headerlink" title="1 同步模型"></a>1 同步模型</h2><p>这是最简单的编程方式。</p><p>在一个时刻，只能有一个任务在执行，并且前一个任务结束后一个任务才能开始。</p><p><img src="http://likebeta.gitbooks.io/twisted-intro-cn/content/zh/_static/p01_sync.png" alt="同步模型示意图"></p><h2 id="2-线程模型"><a href="#2-线程模型" class="headerlink" title="2 线程模型"></a>2 线程模型</h2><h3 id="2-1-进程和线程"><a href="#2-1-进程和线程" class="headerlink" title="2.1 进程和线程"></a>2.1 进程和线程</h3><p>进程是一个资源单位，现成是CPU调度单位。</p><p>程之间不共享资源，但是同一个进程下的线程是可以共享资源的。</p><h3 id="2-2-线程模型"><a href="#2-2-线程模型" class="headerlink" title="2.2 线程模型"></a>2.2 线程模型</h3><p>在这个模型中，每个任务都在单独的线程中完成。</p><p><img src="http://likebeta.gitbooks.io/twisted-intro-cn/content/zh/_static/p01_threaded.png" alt="线程模型"></p><p>这些线程都是由操作系统来管理。</p><p>若在多处理机、多核处理机的系统中可能会相互独立的运行；</p><p>若在单处理机上，则会交错运行。一个核执行一个单独的线程。</p><p>关键点在于，在线程模式中，具体哪个任务执行由操作系统来处理。</p><h2 id="3-异步编程模型"><a href="#3-异步编程模型" class="headerlink" title="3 异步编程模型"></a>3 异步编程模型</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>在这个模型中，任务是交错完成。</p><p>值得注意的是：这是在单线程的控制下。</p><p>这要比多线程模型简单多了，因为编程人员总可以认为只有一个任务在执行，而其它的在停止状态。</p><h3 id="3-2-和线程模型的区别"><a href="#3-2-和线程模型的区别" class="headerlink" title="3.2 和线程模型的区别"></a>3.2 和线程模型的区别</h3><p>典型的现成模型是各个任务并行运行，但是对于单核CPU的时候，执行方式就和异步模型类似了。</p><p>此时的区别是：</p><ul><li>线程模式中任务的切换是由操作系统决定的。</li><li>在异步模型中，任务的切换需要手动编写代码来切换任务。</li></ul><h2 id="4-阻塞"><a href="#4-阻塞" class="headerlink" title="4 阻塞"></a>4 阻塞</h2><p>如果任务都是CPU计算之类的内容， 那么实际上异步模型和同步模型消耗的时间是一样的。</p><p>但是如果任务中有阻塞（IO等操作）， 在任务阻塞的时候执行别的任务， 这样就有利于节省时间。</p><p><img src="http://likebeta.gitbooks.io/twisted-intro-cn/content/zh/_static/p01_block.png" alt="同步模型下出现阻塞"></p><p>所以异步模型至少有两个优点：</p><ul><li>针对有阻塞的任务可以加快任务完成；</li><li>针对服务来说，由于异步模型会来回切换，客户端就能够更快的接收到服务端的响应，从而减少客户端的等待时间。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-同步模型&quot;&gt;&lt;a href=&quot;#1-同步模型&quot; class=&quot;headerlink&quot; title=&quot;1 同步模型&quot;&gt;&lt;/a&gt;1 同步模型&lt;/h2&gt;&lt;p&gt;这是最简单的编程方式。&lt;/p&gt;
&lt;p&gt;在一个时刻，只能有一个任务在执行，并且前一个任务结束后一个任务才能开始
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="同步" scheme="http://weihuchao.top/tags/%E5%90%8C%E6%AD%A5/"/>
    
      <category term="异步" scheme="http://weihuchao.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离思想概述</title>
    <link href="http://weihuchao.top/2018/10/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://weihuchao.top/2018/10/06/前后端分离/</id>
    <published>2018-10-06T14:48:27.000Z</published>
    <updated>2018-10-06T14:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-MVC模型"><a href="#1-MVC模型" class="headerlink" title="1 MVC模型"></a>1 MVC模型</h2><p>全名为Model-View-Controller，即模型-视图-控制器。</p><p><img src="http://static.zybuluo.com/Rico123/et4q5o2ok4ryi6dniwifvcx0/MVC.jpg" alt="mvc模型"></p><p>不足：</p><ul><li>过程复杂。每次请求必须经过“控制器-&gt;模型-&gt;视图”这个流程，用户才能看到最终的展现的界面；</li><li>过于依赖模型。实际上视图是依赖于模型的，换句话说，如果没有模型，视图也无法呈现出最终的效果；</li><li>页面性能较差。渲染视图的过程是在服务端来完成的，最终呈现给浏览器的是带有模型的视图页面，性能无法得到很好的优化。</li></ul><h2 id="2-REST"><a href="#2-REST" class="headerlink" title="2 REST"></a>2 REST</h2><p>为了进一步改进MVC模型， 做了如下改进。</p><p>页面View全程ajax请求Controller，通过与Model交互完成json数据并且返回。</p><p><img src="http://static.zybuluo.com/Rico123/yxk2m9upgn5kzi2027d4v4z5/MVC+%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.jpg" alt="REST"></p><p>REST全称是Representational State Transfer（表述性状态转移）。</p><p>逐渐实现概念，前后端分离。</p><p><img src="http://static.zybuluo.com/Rico123/v98uooq7qquiems7jvhdxm0c/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.jpg" alt="前后端分离"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-MVC模型&quot;&gt;&lt;a href=&quot;#1-MVC模型&quot; class=&quot;headerlink&quot; title=&quot;1 MVC模型&quot;&gt;&lt;/a&gt;1 MVC模型&lt;/h2&gt;&lt;p&gt;全名为Model-View-Controller，即模型-视图-控制器。&lt;/p&gt;
&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前后端分离" scheme="http://weihuchao.top/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    
      <category term="MVC" scheme="http://weihuchao.top/tags/MVC/"/>
    
      <category term="REST" scheme="http://weihuchao.top/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>python创建虚拟环境</title>
    <link href="http://weihuchao.top/2018/10/06/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://weihuchao.top/2018/10/06/创建虚拟环境/</id>
    <published>2018-10-06T14:48:14.000Z</published>
    <updated>2018-10-06T14:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装虚拟环境"><a href="#1-安装虚拟环境" class="headerlink" title="1 安装虚拟环境"></a>1 安装虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv --no-site-packages venv</span><br></pre></td></tr></table></figure><h2 id="2-进入虚拟环境"><a href="#2-进入虚拟环境" class="headerlink" title="2 进入虚拟环境"></a>2 进入虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br></pre></td></tr></table></figure><h2 id="3-安装包"><a href="#3-安装包" class="headerlink" title="3 安装包"></a>3 安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="4-生成需求包"><a href="#4-生成需求包" class="headerlink" title="4 生成需求包"></a>4 生成需求包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h2 id="5-删除虚拟环境"><a href="#5-删除虚拟环境" class="headerlink" title="5 删除虚拟环境"></a>5 删除虚拟环境</h2><p>直接删除文件夹</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装虚拟环境&quot;&gt;&lt;a href=&quot;#1-安装虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;1 安装虚拟环境&quot;&gt;&lt;/a&gt;1 安装虚拟环境&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="虚拟环境" scheme="http://weihuchao.top/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Rector模式概述</title>
    <link href="http://weihuchao.top/2018/10/06/reactor%E6%A8%A1%E5%BC%8F/"/>
    <id>http://weihuchao.top/2018/10/06/reactor模式/</id>
    <published>2018-10-06T14:47:05.000Z</published>
    <updated>2018-10-06T14:47:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-异步请求的客户端"><a href="#1-异步请求的客户端" class="headerlink" title="1 异步请求的客户端"></a>1 异步请求的客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_poetry</span><span class="params">(sockets)</span>:</span></span><br><span class="line">    <span class="string">"""Download poety from all the given sockets."""</span></span><br><span class="line"></span><br><span class="line">    poems = dict.fromkeys(sockets, <span class="string">''</span>) <span class="comment"># socket -&gt; accumulated poem</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># socket -&gt; task numbers</span></span><br><span class="line">    sock2task = dict([(s, i + <span class="number">1</span>) <span class="keyword">for</span> i, s <span class="keyword">in</span> enumerate(sockets)])</span><br><span class="line"></span><br><span class="line">    sockets = list(sockets) <span class="comment"># make a copy</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># we go around this loop until we've gotten all the poetry</span></span><br><span class="line">    <span class="comment"># from all the sockets. This is the 'reactor loop'.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> sockets:</span><br><span class="line">        <span class="comment"># this select call blocks until one or more of the</span></span><br><span class="line">        <span class="comment"># sockets is ready for read I/O</span></span><br><span class="line">        rlist, _, _ = select.select(sockets, [], [])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># rlist is the list of sockets with data ready to read</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> sock <span class="keyword">in</span> rlist:</span><br><span class="line">            data = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    new_data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">except</span> socket.error, e:</span><br><span class="line">                    <span class="keyword">if</span> e.args[<span class="number">0</span>] == errno.EWOULDBLOCK:</span><br><span class="line">                        <span class="comment"># this error code means we would have</span></span><br><span class="line">                        <span class="comment"># blocked if the socket was blocking.</span></span><br><span class="line">                        <span class="comment"># instead we skip to the next socket</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> new_data:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        data += new_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Each execution of this inner loop corresponds to</span></span><br><span class="line">            <span class="comment"># working on one asynchronous task in Figure 3 here:</span></span><br><span class="line">            <span class="comment"># http://krondo.com/?p=1209#figure3</span></span><br><span class="line"></span><br><span class="line">            task_num = sock2task[sock]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                sockets.remove(sock)</span><br><span class="line">                sock.close()</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'Task %d finished'</span> % task_num</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                addr_fmt = format_address(sock.getpeername())</span><br><span class="line">                msg = <span class="string">'Task %d: got %d bytes of poetry from %s'</span></span><br><span class="line">                <span class="keyword">print</span>  msg % (task_num, len(data), addr_fmt)</span><br><span class="line"></span><br><span class="line">            poems[sock] += data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> poems</span><br></pre></td></tr></table></figure><ol><li>异步模式客户端一次性与全部服务器完成连接，而不像同步模式那样一次只连接一个。</li><li>用来进行通信的Socket方法是非阻塞模的，这是通过调用setblocking(0)来实现的。</li><li>select模块中的select方法是用来识别其监视的socket是否有完成数据接收的，如果没有它就处于阻塞状态。</li><li>使用select函数等待所有Socket，直到至少有一个socket有数据到来。</li><li>对每个有数据需要读取的socket，从中读取数据。但仅仅只是读取有效数据，不能为了等待还没来到的数据而发生阻塞。</li><li>由于不断发送， 有可能</li></ol><h2 id="2-reactor模式"><a href="#2-reactor模式" class="headerlink" title="2 reactor模式"></a>2 reactor模式</h2><p>这种，等待事件到来，然后对事件进行处理，处理完毕之后又继续等待事件到来的模型， 就被故写成了reactor模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-异步请求的客户端&quot;&gt;&lt;a href=&quot;#1-异步请求的客户端&quot; class=&quot;headerlink&quot; title=&quot;1 异步请求的客户端&quot;&gt;&lt;/a&gt;1 异步请求的客户端&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Rector" scheme="http://weihuchao.top/tags/Rector/"/>
    
  </entry>
  
  <entry>
    <title>gitlab的基本配置</title>
    <link href="http://weihuchao.top/2018/10/06/gitlab/"/>
    <id>http://weihuchao.top/2018/10/06/gitlab/</id>
    <published>2018-10-06T14:46:47.000Z</published>
    <updated>2018-10-06T14:46:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-设置账户和邮件"><a href="#1-设置账户和邮件" class="headerlink" title="1 设置账户和邮件"></a>1 设置账户和邮件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name weihuchao</span><br><span class="line">git config --global user.email weihuchao@xuetangx.com</span><br></pre></td></tr></table></figure><p>设置存储<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></p><h2 id="2-配置ssh-key"><a href="#2-配置ssh-key" class="headerlink" title="2 配置ssh-key"></a>2 配置ssh-key</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &apos;weihuchao@xuetangx.com&apos;</span><br></pre></td></tr></table></figure><p>生成的文件在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>将内容复制到SSH keys里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-设置账户和邮件&quot;&gt;&lt;a href=&quot;#1-设置账户和邮件&quot; class=&quot;headerlink&quot; title=&quot;1 设置账户和邮件&quot;&gt;&lt;/a&gt;1 设置账户和邮件&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="gitlab" scheme="http://weihuchao.top/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>git进阶之git-flow</title>
    <link href="http://weihuchao.top/2018/10/06/git-flow/"/>
    <id>http://weihuchao.top/2018/10/06/git-flow/</id>
    <published>2018-10-06T14:46:10.000Z</published>
    <updated>2018-10-06T14:46:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-git-flow"><a href="#1-git-flow" class="headerlink" title="1 git flow"></a>1 git flow</h2><p>Git flow script是基于git flow概念的一个帮助我们快速使用该思想的脚本。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><p>OS X<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git-flow</span><br></pre></td></tr></table></figure></p><p>Linux<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git-flow</span><br></pre></td></tr></table></figure></p><p>Windows<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br></pre></td></tr></table></figure></p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h2><p>初始化: git flow init</p><p>开始新Feature: git flow feature start MYFEATURE</p><p>Publish一个Feature(也就是push到远程): git flow feature publish MYFEATURE</p><p>获取Publish的Feature: git flow feature pull origin MYFEATURE</p><p>完成一个Feature: git flow feature finish MYFEATURE</p><p>开始一个Release: git flow release start RELEASE [BASE]</p><p>Publish一个Release: git flow release publish RELEASE<br>发布Release: git flow release finish RELEASE<br>别忘了git push –tags</p><p>开始一个Hotfix: git flow hotfix start VERSION [BASENAME]</p><p>发布一个Hotfix: git flow hotfix finish VERSION</p><h2 id="4-关于init"><a href="#4-关于init" class="headerlink" title="4 关于init"></a>4 关于init</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git flow init -h </span><br><span class="line">   </span><br><span class="line">USAGE: git flow init [flags] args</span><br><span class="line">flags:</span><br><span class="line">  -h  show this <span class="built_in">help</span> (default: <span class="literal">false</span>)</span><br><span class="line">  -f  force setting of gitflow branches, even <span class="keyword">if</span> already configured</span><br><span class="line">      (default: <span class="literal">false</span>)</span><br><span class="line">  -d  use default branch naming conventions (default: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>深入了解: </p><p>该配置写入到了 .git/cnfig 文件中, 如果发现该配置不正确, 可以直接进行编辑</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h2><ul><li><a href="https://www.cnblogs.com/cnblogsfans/p/5075073.html" target="_blank" rel="noopener">https://www.cnblogs.com/cnblogsfans/p/5075073.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-git-flow&quot;&gt;&lt;a href=&quot;#1-git-flow&quot; class=&quot;headerlink&quot; title=&quot;1 git flow&quot;&gt;&lt;/a&gt;1 git flow&lt;/h2&gt;&lt;p&gt;Git flow script是基于git flow概念的一个帮助我们快速使
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="git" scheme="http://weihuchao.top/tags/git/"/>
    
      <category term="git-flow" scheme="http://weihuchao.top/tags/git-flow/"/>
    
  </entry>
  
  <entry>
    <title>python脚本传入参数解析之optparse</title>
    <link href="http://weihuchao.top/2018/10/06/optparse%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://weihuchao.top/2018/10/06/optparse的使用方法/</id>
    <published>2018-10-06T14:44:19.000Z</published>
    <updated>2018-10-06T14:44:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> optparse</span><br></pre></td></tr></table></figure><h2 id="2-创建使用说明"><a href="#2-创建使用说明" class="headerlink" title="2 创建使用说明"></a>2 创建使用说明</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">usage = <span class="string">"""</span></span><br><span class="line"><span class="string">This is usage</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">parser = optparse.OptionParser(usage)</span><br></pre></td></tr></table></figure><h2 id="3-创建指定参数"><a href="#3-创建指定参数" class="headerlink" title="3 创建指定参数"></a>3 创建指定参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">help = <span class="string">"The interface to listen on. Default is localhost."</span></span><br><span class="line">parser.add_option(<span class="string">'--iface'</span>, help=help, default=<span class="string">'localhost'</span>)</span><br></pre></td></tr></table></figure><p>关于add_option函数， 第一个参数需要是<code>--name</code>，name用于之后调用的名字， 也是命令输入需要输入的名字。</p><p>可以设置帮助信息（help）和默认值（default）。</p><h2 id="4-解析输入"><a href="#4-解析输入" class="headerlink" title="4 解析输入"></a>4 解析输入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options, args = parser.parse_args()</span><br></pre></td></tr></table></figure><p><code>parse_args()</code>函数有两个返回值，一个是指定的可选参数，一个是正常输入的所有参数。</p><p>其中可选参数可以通过<code>options.name</code>的方式调用得到该值。</p><h2 id="5-出错退出程序"><a href="#5-出错退出程序" class="headerlink" title="5 出错退出程序"></a>5 出错退出程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">parser.exit()</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">可以传入参数`msg`来输出错误信息。执行该句之后程序退出。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 6 范例</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span><span class="params">()</span>:</span></span><br><span class="line">    usage = <span class="string">"""usage: %prog [options] poetry-file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This is the Slow Poetry Server, blocking edition.</span></span><br><span class="line"><span class="string">Run it like this:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  python slowpoetry.py &lt;path-to-poetry-file&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you are in the base directory of the twisted-intro package,</span></span><br><span class="line"><span class="string">you could run it like this:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  python blocking-server/slowpoetry.py poetry/ecstasy.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">to serve up John Donne's Ecstasy, which I know you want to do.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">    parser = optparse.OptionParser(usage)</span><br><span class="line"></span><br><span class="line">    help = <span class="string">"The port to listen on. Default to a random available port."</span></span><br><span class="line">    parser.add_option(<span class="string">'--port'</span>, type=<span class="string">'int'</span>, help=help)</span><br><span class="line"></span><br><span class="line">    help = <span class="string">"The interface to listen on. Default is localhost."</span></span><br><span class="line">    parser.add_option(<span class="string">'--iface'</span>, help=help, default=<span class="string">'localhost'</span>)</span><br><span class="line"></span><br><span class="line">    help = <span class="string">"The number of seconds between sending bytes."</span></span><br><span class="line">    parser.add_option(<span class="string">'--delay'</span>, type=<span class="string">'float'</span>, help=help, default=<span class="number">.7</span>)</span><br><span class="line"></span><br><span class="line">    help = <span class="string">"The number of bytes to send at a time."</span></span><br><span class="line">    parser.add_option(<span class="string">'--num-bytes'</span>, type=<span class="string">'int'</span>, help=help, default=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    options, args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(args) != <span class="number">1</span>:</span><br><span class="line">        parser.error(<span class="string">'Provide exactly one poetry file.'</span>)</span><br><span class="line"></span><br><span class="line">    poetry_file = args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(args[<span class="number">0</span>]):</span><br><span class="line">        parser.error(<span class="string">'No such file: %s'</span> % poetry_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> options, poetry_file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    options, poetry_file= parse_args()</span><br><span class="line"></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sock.bind((options.iface, options.port <span class="keyword">or</span> <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Serving %s on port %s.'</span> % (poetry_file, sock.getsockname()[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    serve(sock, poetry_file, options.num_bytes, options.delay)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-引入&quot;&gt;&lt;a href=&quot;#1-引入&quot; class=&quot;headerlink&quot; title=&quot;1 引入&quot;&gt;&lt;/a&gt;1 引入&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="optparse" scheme="http://weihuchao.top/tags/optparse/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="http://weihuchao.top/2018/10/06/docker%E7%AC%94%E8%AE%B0/"/>
    <id>http://weihuchao.top/2018/10/06/docker笔记/</id>
    <published>2018-10-06T14:36:49.000Z</published>
    <updated>2018-10-06T14:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docker</span><br></pre></td></tr></table></figure><p>需要下载安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://store.docker.com/editions/community/docker-ce-desktop-mac</span><br></pre></td></tr></table></figure><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ docker --version</span><br><span class="line">Docker version 18.03, build c97c6d6</span><br><span class="line"></span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.22.0, build 8dd22a9</span><br><span class="line"></span><br><span class="line">$ docker-machine --version</span><br><span class="line">docker-machine version 0.14.0, build 9ba6da9</span><br><span class="line"></span><br><span class="line">$ docker run hello-world</span><br><span class="line"></span><br><span class="line">$ docker run -d -p 80:80 --name webserver nginx</span><br><span class="line"># 80:80 前面是docker外面环境使用的端口 后面是docker内部使用的端口</span><br><span class="line"># 需要使用-p来指定端口</span><br><span class="line"></span><br><span class="line">$ docker container ls</span><br><span class="line">$ docker container stop webserver</span><br><span class="line">$ docker container ls -a</span><br><span class="line">$ docker container rm webserver</span><br><span class="line">$ docker image ls</span><br><span class="line">$ docker image rm nginx</span><br></pre></td></tr></table></figure><h3 id="2-1-创建一个Container"><a href="#2-1-创建一个Container" class="headerlink" title="2.1 创建一个Container"></a>2.1 创建一个Container</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir docker_file</span><br><span class="line"><span class="built_in">cd</span> docker_file</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim Dockerfile</span><br><span class="line"></span><br><span class="line"># Use an official Python runtime as a parent image</span><br><span class="line">FROM python:2.7-slim</span><br><span class="line"></span><br><span class="line"># Set the working directory to /app</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># Copy the current directory contents into the container at /app</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line"># Install any needed packages specified in requirements.txt</span><br><span class="line">RUN pip install --trusted-host pypi.python.org -r requirements.txt</span><br><span class="line"></span><br><span class="line"># Make port 80 available to the world outside this container</span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"># Define environment variable</span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line"># Run app.py when the container launches</span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim requirements.txt</span><br><span class="line"></span><br><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim app.py</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line">from redis import Redis, RedisError</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line"># Connect to Redis</span><br><span class="line">redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    try:</span><br><span class="line">        visits = redis.incr(&quot;counter&quot;)</span><br><span class="line">    except RedisError:</span><br><span class="line">        visits = &quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span><br><span class="line"></span><br><span class="line">    html = &quot;&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;&quot;</span><br><span class="line">    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;, port=80)</span><br></pre></td></tr></table></figure><p>创建container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure><p>运行app</p><p>其中-p用于绑定端口，4000:80 前面是docker外面环境使用的端口，后面是docker内部使用的端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure><p>后台运行app</p><p>使用-d， 可以合在一起写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  docker_file docker run -dp 4000:80 friendlyhello</span><br><span class="line">bfc28faf20c23567d7a83667f2040c1469d6adae00ffe45257f494c72e778efe</span><br><span class="line">➜  docker_file docker container ls</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">bfc28faf20c2        friendlyhello       &quot;python app.py&quot;     48 seconds ago      Up 46 seconds       0.0.0.0:4000-&gt;80/tcp   xenodochial_jackson</span><br><span class="line">➜  docker_file docker container stop bfc28faf20c2</span><br><span class="line">bfc28faf20c2</span><br></pre></td></tr></table></figure><p>发布到远程并且使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">➜  docker_file docker login</span><br><span class="line">Authenticating with existing credentials...</span><br><span class="line">Login Succeeded</span><br><span class="line">➜  docker_file docker tag friendlyhello weihuchao/get-started:part1</span><br><span class="line">➜  docker_file docker image ls</span><br><span class="line">REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">friendlyhello           latest              13f8513def89        28 minutes ago      132MB</span><br><span class="line">weihuchao/get-started   part1               13f8513def89        28 minutes ago      132MB</span><br><span class="line">nginx                   latest              bc26f1ed35cf        4 days ago          109MB</span><br><span class="line">hello-world             latest              4ab4c602aa5e        3 weeks ago         1.84kB</span><br><span class="line">ubuntu                  latest              cd6d8154f1e1        3 weeks ago         84.1MB</span><br><span class="line">python                  2.7-slim            c9cde4658340        3 weeks ago         120MB</span><br><span class="line">➜  docker_file docker push weihuchao/get-started:part1</span><br><span class="line">The push refers to repository [docker.io/weihuchao/get-started]</span><br><span class="line">07c6549b588a: Pushed</span><br><span class="line">033e409ef04e: Pushed</span><br><span class="line">3e9874f94f33: Pushed</span><br><span class="line">d509372bacf0: Mounted from library/python</span><br><span class="line">18cc3d97f405: Mounted from library/python</span><br><span class="line">80db77e224a0: Mounted from library/python</span><br><span class="line">8b15606a9e3e: Mounted from library/python</span><br><span class="line">part1: digest: sha256:7c038d51ed3bee7f6bce70489f996a0a53ac050e112eff348a6419cc61beacd4 size: 1787</span><br><span class="line">➜  docker_file docker run -p 4000:80 weihuchao/get-started:part1</span><br><span class="line"> * Serving Flask app &quot;app&quot; (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: Do not use the development server in a production environment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>用到的命令总结</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .  # Create image using this directory&apos;s Dockerfile</span><br><span class="line">docker run -p 4000:80 friendlyhello  # Run &quot;friendlyname&quot; mapping port 4000 to 80</span><br><span class="line">docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode</span><br><span class="line">docker container ls                                # List all running containers</span><br><span class="line">docker container ls -a             # List all containers, even those not running</span><br><span class="line">docker container stop &lt;hash&gt;           # Gracefully stop the specified container</span><br><span class="line">docker container kill &lt;hash&gt;         # Force shutdown of the specified container</span><br><span class="line">docker container rm &lt;hash&gt;        # Remove specified container from this machine</span><br><span class="line">docker container rm $(docker container ls -a -q)         # Remove all containers</span><br><span class="line">docker image ls -a                             # List all images on this machine</span><br><span class="line">docker image rm &lt;image id&gt;            # Remove specified image from this machine</span><br><span class="line">docker image rm $(docker image ls -a -q)   # Remove all images from this machine</span><br><span class="line">docker login             # Log in this CLI session using your Docker credentials</span><br><span class="line">docker tag &lt;image&gt; username/repository:tag  # Tag &lt;image&gt; for upload to registry</span><br><span class="line">docker push username/repository:tag            # Upload tagged image to registry</span><br><span class="line">docker run username/repository:tag                   # Run image from a registry</span><br></pre></td></tr></table></figure><h3 id="2-2-服务"><a href="#2-2-服务" class="headerlink" title="2.2 服务"></a>2.2 服务</h3><p>对于分布式程序， 每个分片就是一个服务。</p><p>创建一个compose文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  docker_file vim docker-compose.yml</span><br><span class="line">➜  docker_file cat docker-compose.yml</span><br><span class="line">version: &quot;3&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    # replace username/repo:tag with your name and image details</span><br><span class="line">    image: weihuchao/get-started:part1</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: 5</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: &quot;0.1&quot;</span><br><span class="line">          memory: 50M</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;4000:80&quot;</span><br><span class="line">    networks:</span><br><span class="line">      - webnet</span><br><span class="line">networks:</span><br><span class="line">  webnet:</span><br></pre></td></tr></table></figure><ul><li>创建一个名为web的服务，运行5个实例。</li><li>一旦失败就重启</li><li>端口配置和之前的一致</li><li>通过名为webnet的负载均衡来进行负载均衡</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">➜  docker_file docker swarm init</span><br><span class="line">Swarm initialized: current node (u3dqg55kw2zuznsl8mkkoj0y4) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-1y7qkerfds031krhu1xry1jrxdiz5k7h2pxh6n9ue0xv9ccnta-70p3h13q9kje8ipbw4hd65wcg 192.168.65.3:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</span><br><span class="line"></span><br><span class="line">➜  docker_file docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class="line">Creating network getstartedlab_webnet</span><br><span class="line">Creating service getstartedlab_web</span><br><span class="line">➜  docker_file docker ps</span><br><span class="line">CONTAINER ID        IMAGE                         COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">d877cae608ad        weihuchao/get-started:part1   &quot;python app.py&quot;     8 seconds ago       Up 5 seconds        80/tcp              getstartedlab_web.2.ptnydvr11qh3pf6sojrp3w4c3</span><br><span class="line">1f5ec4db337b        weihuchao/get-started:part1   &quot;python app.py&quot;     8 seconds ago       Up 5 seconds        80/tcp              getstartedlab_web.5.clqmpbuxb3eara40eoj9uvkzi</span><br><span class="line">afdc3314b63b        weihuchao/get-started:part1   &quot;python app.py&quot;     8 seconds ago       Up 5 seconds        80/tcp              getstartedlab_web.4.tvhwox2d1r5zjds985mety0oj</span><br><span class="line">d4ca340faa6a        weihuchao/get-started:part1   &quot;python app.py&quot;     8 seconds ago       Up 5 seconds        80/tcp              getstartedlab_web.1.wd6dr71vlg84cxpla1g3l7vgh</span><br><span class="line">976e5e62ef00        weihuchao/get-started:part1   &quot;python app.py&quot;     8 seconds ago       Up 6 seconds        80/tcp              getstartedlab_web.3.2085k2dvw7q4lgyf5opjn5vqf</span><br><span class="line">➜  docker_file docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                         PORTS</span><br><span class="line">xfmdeis99zj7        getstartedlab_web   replicated          5/5                 weihuchao/get-started:part1   *:4000-&gt;80/tcp</span><br><span class="line">➜  docker_file docker service ps getstartedlab_web</span><br><span class="line">ID                  NAME                  IMAGE                         NODE                    DESIRED STATE       CURRENT STATE           ERROR               PORTS</span><br><span class="line">wd6dr71vlg84        getstartedlab_web.1   weihuchao/get-started:part1   linuxkit-025000000001   Running             Running 2 minutes ago</span><br><span class="line">ptnydvr11qh3        getstartedlab_web.2   weihuchao/get-started:part1   linuxkit-025000000001   Running             Running 2 minutes ago</span><br><span class="line">2085k2dvw7q4        getstartedlab_web.3   weihuchao/get-started:part1   linuxkit-025000000001   Running             Running 2 minutes ago</span><br><span class="line">tvhwox2d1r5z        getstartedlab_web.4   weihuchao/get-started:part1   linuxkit-025000000001   Running             Running 2 minutes ago</span><br><span class="line">clqmpbuxb3ea        getstartedlab_web.5   weihuchao/get-started:part1   linuxkit-025000000001   Running             Running 2 minutes ago</span><br><span class="line">➜  docker_file docker container ls -q</span><br><span class="line">d877cae608ad</span><br><span class="line">1f5ec4db337b</span><br><span class="line">afdc3314b63b</span><br><span class="line">d4ca340faa6a</span><br><span class="line">976e5e62ef00</span><br><span class="line">➜  docker_file docker stack rm getstartedlab</span><br><span class="line">Removing service getstartedlab_web</span><br><span class="line">Removing network getstartedlab_webnet</span><br><span class="line">➜  docker_file docker swarm leave --force</span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure><p>需要先创建swarm， 在deploy。</p><p>通过负载均衡来访问集群中的不同的服务，不断访问主页可以看到有可能每次访问得到的hostname都是不同的。</p><p>用到的命令集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker stack ls                                            # List stacks or apps</span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  # Run the specified Compose file</span><br><span class="line">docker service ls                 # List running services associated with an app</span><br><span class="line">docker service ps &lt;service&gt;                  # List tasks associated with an app</span><br><span class="line">docker inspect &lt;task or container&gt;                   # Inspect task or container</span><br><span class="line">docker container ls -q                                      # List container IDs</span><br><span class="line">docker stack rm &lt;appname&gt;                             # Tear down an application</span><br><span class="line">docker swarm leave --force      # Take down a single node swarm from the manager</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1 安装&quot;&gt;&lt;/a&gt;1 安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="docker" scheme="http://weihuchao.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SSH的一般配置</title>
    <link href="http://weihuchao.top/2018/10/06/ssh%E9%85%8D%E7%BD%AE/"/>
    <id>http://weihuchao.top/2018/10/06/ssh配置/</id>
    <published>2018-10-06T14:34:26.000Z</published>
    <updated>2018-10-06T14:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="config配置"><a href="#config配置" class="headerlink" title="config配置"></a>config配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host fd-git</span><br><span class="line">    Hostname git.finger.dance</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/weihc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;config配置&quot;&gt;&lt;a href=&quot;#config配置&quot; class=&quot;headerlink&quot; title=&quot;config配置&quot;&gt;&lt;/a&gt;config配置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SSH" scheme="http://weihuchao.top/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>设置Mac</title>
    <link href="http://weihuchao.top/2018/10/06/%E8%AE%BE%E7%BD%AEmac/"/>
    <id>http://weihuchao.top/2018/10/06/设置mac/</id>
    <published>2018-10-06T14:32:40.000Z</published>
    <updated>2018-10-06T14:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-设置launchpad的展示方式"><a href="#1-设置launchpad的展示方式" class="headerlink" title="1 设置launchpad的展示方式"></a>1 设置launchpad的展示方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock springboard-columns -int 12</span><br><span class="line">defaults write com.apple.dock springboard-rows -int 8</span><br><span class="line">defaults write com.apple.dock ResetLaunchPad -bool TRUE</span><br><span class="line">killall Dock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-设置launchpad的展示方式&quot;&gt;&lt;a href=&quot;#1-设置launchpad的展示方式&quot; class=&quot;headerlink&quot; title=&quot;1 设置launchpad的展示方式&quot;&gt;&lt;/a&gt;1 设置launchpad的展示方式&lt;/h2&gt;&lt;figure c
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Mac" scheme="http://weihuchao.top/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>amazing trees-泽野弘之</title>
    <link href="http://weihuchao.top/2018/09/19/amazing%20trees%20-%20%E6%B3%BD%E9%87%8E%E5%BC%98%E4%B9%8B/"/>
    <id>http://weihuchao.top/2018/09/19/amazing trees - 泽野弘之/</id>
    <published>2018-09-19T14:50:25.000Z</published>
    <updated>2018-09-19T14:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="平假名歌词"><a href="#平假名歌词" class="headerlink" title="平假名歌词"></a>平假名歌词</h2><p>僕はホコリだけの答えを見つけた顔しながら<br>ぼくは ホコリ(hokori)だけ のこたえを みつけ たかおしながら</p><p>外で本当の言葉を置き忘れていたんだ<br>そとでほんとうのことばを おき わすれてい たんだ</p><p>裏返しの過去に明かりを照らしてても<br>(う)らがえしのかこに　あかり をてらし てても</p><p>誤魔化したこれまでの声が横で目を覚ます<br>ごまかした これま(で)のこえが　よこでめを さます</p><p>走り出すのが 当たり前だったと うろ覚えなふりを<br>(は)しりたすのが　あたりまえだったと　うろおぼえな　ふりを</p><p>時に濡れた道の砂が靴の底に詰まる<br>ときに　ぬれた　みちの　すなが　くつの　そこに　つまる</p><p>振り落とせば出れる路地<br>ふりおとせば　でれ(る)ろじ</p><p>Getting me all upset I just wanna be free<br>I couldn’t!<br>Truth that I have been hiding, it’s so hard to see<br>You’ve been getting me all upset I have fallen too far!<br>I couldn’t grow the way I’ve been wanting<br>You know who you are!<br>We’re all amazing trees reaching up to the stars<br>Though we’re no longer children they sing in our hearts<br>We know the time that’s passing is not everlasting<br>Stop telling yourself the lies<br>I wanna change</p><p>それはずれた祈りをかわしまた後ろに近づく<br>それはずれたいのりを かわし またうしろにちかづく</p><p>あの日出逢った喜びを無邪気に掲げながら<br>あのひ であったよろこびを　むじゃきにかかげながら</p><p>迷路に似たような怖さと期待の影<br>めいろににたような　こわさ ときたい のかげ</p><p>これが最後みたいな風通るのは街のせいじゃない<br>これがさいご(み)たいなかぜとお(る)のは　まちのせいじゃない</p><p>泣き出した日が 立つ未来選んだ スローペースと向き合う<br>なきだしたひが　たつみらいえらんだ　スローペースと むきあう</p><p>焦る月が惑わす空で通り雨に打たれる<br>あせる　つきが　まどわ(す) そらで　とおり　あめに　うたれる</p><p>幼い日々が 直線を歌う<br>おさないびが　ちょくせんをうたう</p><p>Getting me all upset I just wanna be free<br>I couldn’t!<br>Truth that I have been hiding, it’s so hard to see<br>You’ve been getting me all upset I have fallen too far!<br>I couldn’t grow the way I’ve been wanting<br>You know who you are!<br>We’re all amazing trees reaching up to the stars<br>Though we’re no longer children they sing in our hearts<br>We know the time that’s passing is not everlasting<br>Stop telling yourself the lies<br>I wanna change<br>Amazing trees, amazing trees</p><p>空側に眺めた色は<br>そながわに　ながめたいろは</p><p>影さえ消えた雑じり気ないold &amp; new<br>かげさえ きえた　まじりげない　old &amp; new　</p><p>Getting me all upset I just wanna be free<br>I couldn’t!<br>Truth that I have been hiding, it’s so hard to see<br>You’ve been getting me all upset I have fallen too far!<br>I couldn’t grow the way I’ve been wanting<br>You know who you are!<br>We’re all amazing trees reaching up to the stars<br>Though we’re no longer children they sing in our hearts<br>We know the time that’s passing is not everlasting<br>Stop telling yourself the lies<br>I wanna change</p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li>歌词来源： <a href="http://j-lyric.net/artist/a05b956/l042861.html" target="_blank" rel="noopener">http://j-lyric.net/artist/a05b956/l042861.html</a></li><li>汉字翻译： <a href="https://kanji.jitenon.jp/" target="_blank" rel="noopener">https://kanji.jitenon.jp/</a></li><li>翻译： <a href="https://dictionary.goo.ne.jp/jn/" target="_blank" rel="noopener">https://dictionary.goo.ne.jp/jn/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;平假名歌词&quot;&gt;&lt;a href=&quot;#平假名歌词&quot; class=&quot;headerlink&quot; title=&quot;平假名歌词&quot;&gt;&lt;/a&gt;平假名歌词&lt;/h2&gt;&lt;p&gt;僕はホコリだけの答えを見つけた顔しながら&lt;br&gt;ぼくは ホコリ(hokori)だけ のこたえを みつけ たかおしなが
      
    
    </summary>
    
      <category term="Music" scheme="http://weihuchao.top/categories/Music/"/>
    
    
      <category term="歌词" scheme="http://weihuchao.top/tags/%E6%AD%8C%E8%AF%8D/"/>
    
      <category term="音乐" scheme="http://weihuchao.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>yilia主题自定义</title>
    <link href="http://weihuchao.top/2018/09/19/%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>http://weihuchao.top/2018/09/19/主题自定义/</id>
    <published>2018-09-19T13:39:12.000Z</published>
    <updated>2018-09-19T13:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新</p><h2 id="修改footer"><a href="#修改footer" class="headerlink" title="修改footer"></a>修改footer</h2><p>yilia/layout/_partial/footer.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer-info"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: inline-block;"</span>&gt;</span></span><br><span class="line">        Stay hunger, stay young!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改文章显示时间"><a href="#修改文章显示时间" class="headerlink" title="修改文章显示时间"></a>修改文章显示时间</h2><p>yilia/layout/_partial/post/date.ejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= date(post.date, date_format) %&gt;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= date(post.date, &apos;YYYY-MM-DD HH:mm:ss&apos;) %&gt;</span><br></pre></td></tr></table></figure><p>代码参考</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br></pre></td></tr></table></figure><h2 id="首页文章标题对齐"><a href="#首页文章标题对齐" class="headerlink" title="首页文章标题对齐"></a>首页文章标题对齐</h2><p>yilia/source/main.0cf68a.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-inner</span> <span class="selector-tag">h1</span><span class="selector-class">.article-title</span>, <span class="selector-class">.article-title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#696969</span>;</span><br><span class="line">  <span class="comment">/* margin-left: 0px; */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">  <span class="attribute">-webkit-transition</span>: color <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: color <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">-o-transition</span>: color <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: color <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标题加入背景色"><a href="#标题加入背景色" class="headerlink" title="标题加入背景色"></a>标题加入背景色</h2><p>yilia/source/main.0cf68a.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-header</span>&#123;<span class="attribute">border-left</span>:<span class="number">5px</span> solid <span class="number">#4d4d4d</span>;<span class="attribute">background-color</span>: <span class="number">#d5d8d9</span>;<span class="attribute">padding</span>:<span class="number">30px</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">25px</span>;<span class="attribute">padding-left</span>:<span class="number">7.6923%</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;持续更新&lt;/p&gt;
&lt;h2 id=&quot;修改footer&quot;&gt;&lt;a href=&quot;#修改footer&quot; class=&quot;headerlink&quot; title=&quot;修改footer&quot;&gt;&lt;/a&gt;修改footer&lt;/h2&gt;&lt;p&gt;yilia/layout/_partial/footer.ejs&lt;/
      
    
    </summary>
    
      <category term="Hexo" scheme="http://weihuchao.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://weihuchao.top/tags/Hexo/"/>
    
      <category term="主题" scheme="http://weihuchao.top/tags/%E4%B8%BB%E9%A2%98/"/>
    
      <category term="自定义" scheme="http://weihuchao.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>正向代理和反向代理</title>
    <link href="http://weihuchao.top/2018/09/19/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://weihuchao.top/2018/09/19/正向代理和反向代理/</id>
    <published>2018-09-19T03:07:20.000Z</published>
    <updated>2018-09-19T04:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>客户端和代理处于同一个局域网（也不全是），客户端连接到代理，代理直接访问服务端的情况。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>客户端直接访问代理，该代理对于客户端来说就是访问的目标，然后该代理依据访问的内容等因素，根据配置，选择在身后的合适的服务端，请求服务端，然后将服务端返回的内容返回给客户端。</p><p>一般来说，该代理和服务端处于一个局域网。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>通过局域网判断：</p><ul><li>正向代理： 客户端和代理处于一个局域网</li><li>反向代理： 服务端和代理处于一个局域网</li></ul><p><img src="http://pic1.zhimg.com/80/480c1c45d2565e2f92fd930d25b73a18_hd.jpg" alt="图1"></p><p>通过对应关系判断：</p><ul><li>正向代理： 客户端-代理-服务端是 N:1:1 的关系</li><li>反向代理： 客户端-代理-服务端是 1:1:N 的关系</li></ul><p><img src="http://pic4.zhimg.com/80/2582ac2a1366e3e12acf274265ea80f3_hd.jpg" alt="图2"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>博客：<a href="https://www.cnblogs.com/Anker/p/6056540.html" target="_blank" rel="noopener">https://www.cnblogs.com/Anker/p/6056540.html</a></li><li>知乎：<a href="https://www.zhihu.com/question/24723688" target="_blank" rel="noopener">https://www.zhihu.com/question/24723688</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerlink&quot; title=&quot;正向代理&quot;&gt;&lt;/a&gt;正向代理&lt;/h2&gt;&lt;p&gt;客户端和代理处于同一个局域网（也不全是），客户端连接到代理，代理直接访问服务端的情况。&lt;/p&gt;
&lt;h2 id=&quot;反向代理&quot;&gt;
      
    
    </summary>
    
      <category term="server" scheme="http://weihuchao.top/categories/server/"/>
    
    
      <category term="server" scheme="http://weihuchao.top/tags/server/"/>
    
      <category term="代理" scheme="http://weihuchao.top/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="反向代理" scheme="http://weihuchao.top/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>安装mysql依赖</title>
    <link href="http://weihuchao.top/2018/09/18/%E5%AE%89%E8%A3%85mysql%E4%BE%9D%E8%B5%96/"/>
    <id>http://weihuchao.top/2018/09/18/安装mysql依赖/</id>
    <published>2018-09-18T11:23:45.000Z</published>
    <updated>2018-09-18T11:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在运行Django项目的时候可能会需要mysql环境。</p><h2 id="mysqlclient"><a href="#mysqlclient" class="headerlink" title="mysqlclient"></a>mysqlclient</h2><p>这是用于python3的库。</p><p>安装方法：</p><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql-connector-c</span><br></pre></td></tr></table></figure><p>mac上需要修改 mysql_config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mysql_config</span><br><span class="line">Usage: /usr/local/bin/mysql_config [OPTIONS]</span><br><span class="line"></span><br><span class="line">➜  ~ ll /usr/local/bin/mysql_config</span><br><span class="line">lrwxr-xr-x  1 weihuchao  admin    51B  9 18 18:10 /usr/local/bin/mysql_config -&gt; ../Cellar/mysql-connector-c/6.1.11/bin/mysql_config</span><br><span class="line"></span><br><span class="line">➜  ~ cd /usr/local/Cellar/mysql-connector-c/6.1.11/bin/</span><br><span class="line"></span><br><span class="line">➜  bin ll</span><br><span class="line">total 14176</span><br><span class="line">-r-xr-xr-x  1 weihuchao  staff   3.4M  9 18 18:10 my_print_defaults</span><br><span class="line">-r-xr-xr-x  1 weihuchao  staff   4.7K  9 18 18:26 mysql_config</span><br><span class="line">-r-xr-xr-x  1 weihuchao  staff   3.5M  9 18 18:10 perror</span><br><span class="line"></span><br><span class="line">➜  bin sudo chmod a+x mysql_config</span><br></pre></td></tr></table></figure></p><p>修改文件112行左右<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Create options</span><br><span class="line">libs=&quot;-L$pkglibdir&quot;</span><br><span class="line">libs=&quot;$libs -l &quot;</span><br></pre></td></tr></table></figure></p><p>改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Create options</span><br><span class="line">libs=&quot;-L$pkglibdir&quot;</span><br><span class="line">libs=&quot;$libs -lmysqlclient -lssl -lcrypto&quot;</span><br></pre></td></tr></table></figure><p>最后安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install mysqlclient</span><br></pre></td></tr></table></figure></p><h2 id="MySQL-python"><a href="#MySQL-python" class="headerlink" title="MySQL-python"></a>MySQL-python</h2><p>这个主要是用于python2中。</p><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install MySQL-python==1.2.5</span><br></pre></td></tr></table></figure><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><p>mysqlclient <a href="https://pypi.org/project/mysqlclient/" target="_blank" rel="noopener">https://pypi.org/project/mysqlclient/</a></p></li><li><p>MySQL-python <a href="https://pypi.org/project/MySQL-python/1.2.5/" target="_blank" rel="noopener">https://pypi.org/project/MySQL-python/1.2.5/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在运行Django项目的时候可能会需要mysql环境。&lt;/p&gt;
&lt;h2 id=&quot;mysqlclient&quot;&gt;&lt;a href=&quot;#mysqlclient&quot; class=&quot;headerlink&quot; title=&quot;mysqlclient&quot;&gt;&lt;/a&gt;mysqlclient&lt;/h2&gt;&lt;p
      
    
    </summary>
    
      <category term="笔记" scheme="http://weihuchao.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://weihuchao.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="环境" scheme="http://weihuchao.top/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>python主流web框架对比</title>
    <link href="http://weihuchao.top/2018/09/18/python%E4%B8%BB%E6%B5%81web%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
    <id>http://weihuchao.top/2018/09/18/python主流web框架对比/</id>
    <published>2018-09-18T01:32:11.000Z</published>
    <updated>2018-09-19T05:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><p>Django框架”大而全”。</p><p>内置ORM有很多便利操作。由于功能比较全，可以在框架很多地方很便利的使用。</p><p>模板也与众不同，都有自己特定的语法。在模板上进行代码操作的空间比较小。</p><h2 id="Tornado"><a href="#Tornado" class="headerlink" title="Tornado"></a>Tornado</h2><p>Tornado是一个轻量级框架，”少而精”。</p><p>模板、ORM等都只是简单的功能。</p><p>注重性能优越，速度快</p><p>解决高并发</p><p>异步非阻塞</p><p>websockets 长连接</p><p>内嵌了HTTP服务器</p><p>单线程的异步网络程序，默认启动时根据CPU数量运行多个实例；利用CPU多核的优势。</p><p>请求处理是基于回调的非阻塞调用，这样能提高并发量。 模板和数据库部分有很多第三方的模块可供选择，这样不利于封装为一个功能模块。</p><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>串行, 顺序执行</p><p>并行, 同时运行</p><p>并发, 时间片切换运行</p><p>同步, 一个进程在执行某个请求的时候, 如果没有返回则会一直等待</p><p>异步, 不管其他进程状态, 继续执行自己之后的内容</p><p>1.apply方法是阻塞的。<br>意思就是等待当前子进程执行完毕后，在执行下一个进程。</p><p>2.apply_async 是异步非阻塞的。<br>意思就是：不用等待当前进程执行完毕，随时根据系统调度来进行进程切换。</p><p>完全没有等待子进程执行完毕，主进程就已经执行完毕，并退出程序。<br>为什么会这样呢？<br>因为进程的切换是操作系统来控制的，抢占式的切换模式。<br>我们首先运行的是主进程，cpu运行很快啊，这短短的几行代码，完全没有给操作系统进程切换的机会，主进程就运行完毕了，整个程序结束。子进程完全没有机会切换到程序就已经结束了。</p><p>apply是阻塞式的。<br>首先主进程开始运行，碰到子进程，操作系统切换到子进程，等待子进程运行结束后，在切换到另外一个子进程，直到所有子进程运行完毕。然后在切换到主进程，运行剩余的部分。</p><p>apply_async是异步非阻塞式的。<br>首先主进程开始运行，碰到子进程后，主进程说：让我先运行个够，等到操作系统进行进程切换的时候，在交给子进程运行。以为我们的程序太短，然而还没等到操作系统进行进程切换，主进程就运行完毕了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Django&quot;&gt;&lt;a href=&quot;#Django&quot; class=&quot;headerlink&quot; title=&quot;Django&quot;&gt;&lt;/a&gt;Django&lt;/h2&gt;&lt;p&gt;Django框架”大而全”。&lt;/p&gt;
&lt;p&gt;内置ORM有很多便利操作。由于功能比较全，可以在框架很多地方很便
      
    
    </summary>
    
      <category term="python" scheme="http://weihuchao.top/categories/python/"/>
    
    
      <category term="python" scheme="http://weihuchao.top/tags/python/"/>
    
      <category term="web框架" scheme="http://weihuchao.top/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Django" scheme="http://weihuchao.top/tags/Django/"/>
    
      <category term="Tornado" scheme="http://weihuchao.top/tags/Tornado/"/>
    
  </entry>
  
  <entry>
    <title>网络编程理论</title>
    <link href="http://weihuchao.top/2018/09/16/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    <id>http://weihuchao.top/2018/09/16/网络编程理论/</id>
    <published>2018-09-16T04:01:15.000Z</published>
    <updated>2018-09-16T04:01:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-客户端服务端架构"><a href="#1-客户端服务端架构" class="headerlink" title="1 客户端服务端架构"></a>1 客户端服务端架构</h2><p>该架构指的是，对于客户端来说，请求服务器得到请求响应的内容，而对于服务端来说就是要不断接受客户端的请求并给予反馈。</p><h2 id="2-套接字"><a href="#2-套接字" class="headerlink" title="2 套接字"></a>2 套接字</h2><h3 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h3><p>网络化的程序在开始任何通讯之前都需要创建套接字。</p><p>是<strong>通信端点</strong>这一概念在计算机网络的数据结构。</p><p>起源于BSD Linux，因此有叫BSD套接字。</p><p>一台主机多个应用的通信， 叫做<strong>进程间的通信IPC</strong>。</p><h3 id="2-2-套接字分类"><a href="#2-2-套接字分类" class="headerlink" title="2.2 套接字分类"></a>2.2 套接字分类</h3><p>套接字有两种：</p><ul><li>基于文件型；</li><li>基于网络型；</li></ul><p>套接字家族。套接字的不同类型的一个集合。有套接字家族名字。</p><p>常见的文件型套接字家族，家族名为<strong>AF_UNIX</strong>。</p><p>常见的网络型套接字家族，家族名为<strong>AF_INET</strong>。</p><h3 id="2-3-套接字的类型"><a href="#2-3-套接字的类型" class="headerlink" title="2.3 套接字的类型"></a>2.3 套接字的类型</h3><p>套接字类型有两种：</p><ul><li>面向连接的套接字</li><li>无连接的套接字</li></ul><p>面向连接的套接字基于TCP，类型为<strong>SOCKET_STREAM</strong>。</p><p>无连接的套接字基于UDP，类型为<strong>SOCKET_DGRAM</strong>（datagram）。</p><p>由于这些套接字通过IP协议来查找主机，因此分别组成系统<strong>TCP/IP</strong>和<strong>UDP/IP</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-客户端服务端架构&quot;&gt;&lt;a href=&quot;#1-客户端服务端架构&quot; class=&quot;headerlink&quot; title=&quot;1 客户端服务端架构&quot;&gt;&lt;/a&gt;1 客户端服务端架构&lt;/h2&gt;&lt;p&gt;该架构指的是，对于客户端来说，请求服务器得到请求响应的内容，而对于服务端来说
      
    
    </summary>
    
      <category term="python" scheme="http://weihuchao.top/categories/python/"/>
    
    
      <category term="python" scheme="http://weihuchao.top/tags/python/"/>
    
      <category term="网络编程" scheme="http://weihuchao.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
      <category term="TCP" scheme="http://weihuchao.top/tags/TCP/"/>
    
      <category term="UDP" scheme="http://weihuchao.top/tags/UDP/"/>
    
      <category term="套接字" scheme="http://weihuchao.top/tags/%E5%A5%97%E6%8E%A5%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>python拾遗</title>
    <link href="http://weihuchao.top/2018/09/01/python%E6%8B%BE%E9%81%97/"/>
    <id>http://weihuchao.top/2018/09/01/python拾遗/</id>
    <published>2018-08-31T16:00:00.000Z</published>
    <updated>2018-09-16T01:38:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1 输入输出"></a>1 输入输出</h2><p><code>print()</code>函数可以传入多个参数，多个参数以空格分割</p><p><code>input()</code>函数表示输入，将输入的内容作为返回值， 类型是字符串。</p><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>字符串的单引号和双引号的转移由<strong>\</strong>完成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'I\'m \"OK\"!'</span>)</span><br><span class="line">I<span class="string">'m "OK"!</span></span><br></pre></td></tr></table></figure><h2 id="3-字符编码问题"><a href="#3-字符编码问题" class="headerlink" title="3 字符编码问题"></a>3 字符编码问题</h2><p>Python2好Python3有重大区别</p><h3 id="3-1-Python3"><a href="#3-1-Python3" class="headerlink" title="3.1 Python3"></a>3.1 Python3</h3><h4 id="part-one"><a href="#part-one" class="headerlink" title="part one"></a>part one</h4><p>字符串是以Unicode编码的</p><p>也就是说，在程序输入过程中， 默认支持带格式的内容或者Unicode编码内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'包含中文的str'</span>)</span><br><span class="line">包含中文的str</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\u4e2d\u6587'</span></span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'包含\u4e2d\u6587的str'</span>)</span><br><span class="line">包含中文的str</span><br></pre></td></tr></table></figure><p>相关内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'中'</span>)</span><br><span class="line"><span class="number">20013</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">66</span>)</span><br><span class="line"><span class="string">'B'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">25991</span>)</span><br><span class="line"><span class="string">'文'</span></span><br></pre></td></tr></table></figure><h4 id="part-two"><a href="#part-two" class="headerlink" title="part two"></a>part two</h4><p>如果涉及网络传输或者保存到文件， 会将str变为以字节为单位的bytes。</p><p>bytes的每个字符都只占用一个字节。</p><p>str在内存中以Unicode表示，一个字符对应若干个字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">'ABC'</span>   <span class="comment"># str</span></span><br><span class="line">x = <span class="string">b'ABC'</span>  <span class="comment"># bytes</span></span><br></pre></td></tr></table></figure><p>str转换成bytes是用函数<code>encode()</code>， 需要传入编码类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">b'ABC'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure><p>bytes转化为str使用函数<code>decode()</code>， 需要传入编码类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure><p>附带参数可以忽略错误， <code>errors=&#39;ignore&#39;</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xff'</span>.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line"><span class="string">'中'</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Python2"><a href="#3-2-Python2" class="headerlink" title="3.2 Python2"></a>3.2 Python2</h3><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4 函数"></a>4 函数</h2><h3 id="4-1-函数参数"><a href="#4-1-函数参数" class="headerlink" title="4.1 函数参数"></a>4.1 函数参数</h3><h4 id="4-1-1-位置参数"><a href="#4-1-1-位置参数" class="headerlink" title="4.1.1 位置参数"></a>4.1.1 位置参数</h4><h4 id="4-1-2-默认参数"><a href="#4-1-2-默认参数" class="headerlink" title="4.1.2 默认参数"></a>4.1.2 默认参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">apd</span><span class="params">(L=[])</span>:</span></span><br><span class="line">        L.append(<span class="string">"end"</span>)</span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apd([<span class="number">1</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="string">'end'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apd()</span><br><span class="line">[<span class="string">'end'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apd()</span><br><span class="line">[<span class="string">'end'</span>, <span class="string">'end'</span>]</span><br></pre></td></tr></table></figure><p>解释原因为： Python函数的默认参数在<strong>函数定义的时候已经生成了</strong>。</p><h4 id="4-1-3-可变参数"><a href="#4-1-3-可变参数" class="headerlink" title="4.1.3 可变参数"></a>4.1.3 可变参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line">calc(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">calc(*nums)</span><br></pre></td></tr></table></figure><p>Python的解包会把序列内容解析出来。</p><p><strong>解包，将后面的对象释放出来的行为。解包后得到的是一个序列。</strong></p><h4 id="4-1-4-关键字参数"><a href="#4-1-4-关键字参数" class="headerlink" title="4.1.4 关键字参数"></a>4.1.4 关键字参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kwargs)</span><br></pre></td></tr></table></figure><h4 id="4-1-5-命名关键字参数"><a href="#4-1-5-命名关键字参数" class="headerlink" title="4.1.5 命名关键字参数"></a>4.1.5 命名关键字参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></span><br><span class="line">    print(name, age, city, job)</span><br></pre></td></tr></table></figure><p>命名关键字参数需要一个特殊分隔符<em>，</em>后面的参数被视为命名关键字参数。</p><h4 id="4-1-6-参数顺序"><a href="#4-1-6-参数顺序" class="headerlink" title="4.1.6 参数顺序"></a>4.1.6 参数顺序</h4><p>参数定义的顺序必须是：<strong>必选参数</strong>、<strong>默认参数</strong>、<strong>可变参数</strong>、<strong>命名关键字参数</strong>和<strong>关键字参数</strong>。</p><h3 id="4-2-高阶函数"><a href="#4-2-高阶函数" class="headerlink" title="4.2 高阶函数"></a>4.2 高阶函数</h3><p>如果一个函数的<strong>传入参数也是一个函数</strong>，那么这个函数就是一个高阶函数。</p><h4 id="4-2-1-map"><a href="#4-2-1-map" class="headerlink" title="4.2.1 map"></a>4.2.1 map</h4><p><code>map()</code>函数接受两个参数， 一个是计算函数， 另一个是迭代器。</p><p>功能是不断取得迭代器中的返回值作为计算函数的传入参数，计算得到的值作为返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = map(f, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">&lt;map object at <span class="number">0x104abeb00</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(r)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h4 id="4-2-2-reduce"><a href="#4-2-2-reduce" class="headerlink" title="4.2.2 reduce"></a>4.2.2 reduce</h4><p><code>reduce()</code>函数也是传入一个函数，一个迭代器。</p><p>功能和map不同的是， 第一次取得迭代器的两个值，传入函数得到结果，该结果和迭代器的下一个值继续传入函数中，不断循环计算直到计算完毕迭代器中的全部值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>应用map和reduce可以做到字符数字转化为整数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">DIGITS = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> DIGITS[s]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, map(char2num, s))</span><br></pre></td></tr></table></figure><h4 id="4-2-3-filter"><a href="#4-2-3-filter" class="headerlink" title="4.2.3 filter"></a>4.2.3 filter</h4><p>同样传入两个参数， 一个函数一个可迭代对象。</p><p>功能类似map，不过该函数返回True该值保留，返回False该值不保留。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">15</span>]</span><br></pre></td></tr></table></figure><h4 id="4-2-4-sorted"><a href="#4-2-4-sorted" class="headerlink" title="4.2.4 sorted"></a>4.2.4 sorted</h4><p>排序函数，传入一个序列，<strong>返回排序后的序列</strong>。原序列<strong>不发生改变</strong>。</p><ul><li><strong>参数key</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</span><br></pre></td></tr></table></figure><p>相当于是map函数，key接受的是一个处理函数。之后对map函数的结果进行排序。</p><ul><li><strong>参数reverse</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span>], reverse=<span class="keyword">True</span>)</span><br><span class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>默认是升序排列，改值默认值为False。</p><h3 id="4-3-闭包"><a href="#4-3-闭包" class="headerlink" title="4.3 闭包"></a>4.3 闭包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">()</span>:</span></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">             <span class="keyword">return</span> i*i</span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>像这种，<strong>函数内部嵌套函数</strong>， <strong>嵌套函数调用函数局部变量</strong>，<strong>函数返回该嵌套函数</strong>，的函数就称为闭包。</p><p>闭包的特性是能够外部调用函数内容的函数，且使用到之前时候的局部变量。</p><p>在这个函数中，由于在<strong>完成count()的时候会遍历该for循环</strong>， 导致在调用<code>f1()</code>之前局部变量i已经等于3了。</p><h3 id="4-4-lambda函数"><a href="#4-4-lambda函数" class="headerlink" title="4.4 lambda函数"></a>4.4 lambda函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y</span><br></pre></td></tr></table></figure><h3 id="4-5-装饰器"><a href="#4-5-装饰器" class="headerlink" title="4.5 装饰器"></a>4.5 装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2018-09-03'</span>)</span><br></pre></td></tr></table></figure><p>执行过程：</p><ul><li><code>@log</code>：执行到装饰器语法糖时;</li><li><code>log(now)</code>: 会将装饰的函数作为参数;</li><li><code>def wrapper()</code>: 执行装饰器第一层内容;</li><li><code>now = wrapper</code>: 并将返回值设置成装饰的函数。</li></ul><p>等价操作为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = log(now)</span><br></pre></td></tr></table></figure><p>如果需要在装饰器的时候传入参数。编写的装饰器需要再添加一层。</p><p>原因如下：</p><p>@装饰器 这是个固定格式，要传入参数，就需要一个函数来接受，也就是说，需要在原有的基础上，使得 <strong>装饰器=函数(传入参数)</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">            print(<span class="string">'%s %s():'</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line">    </span><br><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'2015-3-25'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"></span><br><span class="line">now = log(<span class="string">'execute'</span>)(now)</span><br><span class="line"><span class="comment"># now = log(now) # 这是之前</span></span><br></pre></td></tr></table></figure><p>完整写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h3 id="4-6-偏函数"><a href="#4-6-偏函数" class="headerlink" title="4.6 偏函数"></a>4.6 偏函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">int2 = functools.partial(int, base=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2</span><span class="params">(x, base=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(x, base)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max2 = functools.partial(max, <span class="number">10</span>)</span><br><span class="line">max2(<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="4-7-静态函数和类函数"><a href="#4-7-静态函数和类函数" class="headerlink" title="4.7 静态函数和类函数"></a>4.7 静态函数和类函数</h3><ul><li>静态函数使用<strong>@staticmethod</strong>，函数仅仅绑定给类不绑定给对象，无需传入对象或者类；</li><li>类函数使用<strong>@classmethod</strong>，函数仅仅绑定给类不绑定给对象，无需传入对象，但是需要传入类作为第一个参数；</li></ul><h2 id="5-一些特性"><a href="#5-一些特性" class="headerlink" title="5 一些特性"></a>5 一些特性</h2><h3 id="5-1-迭代"><a href="#5-1-迭代" class="headerlink" title="5.1 迭代"></a>5.1 迭代</h3><p>通过for循环来遍历这个list或tuple，这种遍历我们称为<strong>迭代</strong>（Iteration）。</p><h3 id="5-2-列表生成式"><a href="#5-2-列表生成式" class="headerlink" title="5.2 列表生成式"></a>5.2 列表生成式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'XYZ'</span>]</span><br><span class="line">[<span class="string">'AX'</span>, <span class="string">'AY'</span>, <span class="string">'AZ'</span>, <span class="string">'BX'</span>, <span class="string">'BY'</span>, <span class="string">'BZ'</span>, <span class="string">'CX'</span>, <span class="string">'CY'</span>, <span class="string">'CZ'</span>]</span><br></pre></td></tr></table></figure><h3 id="5-3-生成器"><a href="#5-3-生成器" class="headerlink" title="5.3 生成器"></a>5.3 生成器</h3><p>一边循环一边计算的机制，称为<strong>生成器</strong>：generator。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x10dd45ba0</span>&gt;</span><br></pre></td></tr></table></figure><p>输出生成器的内容使用函数<code>next()</code>。</p><p>同时生成器也是可迭代的。</p><p>使用<code>yield</code>可以编写生成器函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'step 1'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">'step 2'</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'step 3'</span>)</span><br><span class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</span><br><span class="line">step <span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</span><br><span class="line">step <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</span><br><span class="line">step <span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><h3 id="5-4-迭代器"><a href="#5-4-迭代器" class="headerlink" title="5.4 迭代器"></a>5.4 迭代器</h3><p>可以直接作用于for循环的可迭代对象， 叫做<strong>可迭代对象</strong>（Iterable）。</p><p>可以使用<code>isinstance()</code>判断一个对象是否是可迭代对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([], Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为<strong>迭代器</strong>：Iterator。</p><h2 id="6-面向对象"><a href="#6-面向对象" class="headerlink" title="6 面向对象"></a>6 面向对象</h2><h3 id="6-1-特殊变量"><a href="#6-1-特殊变量" class="headerlink" title="6.1 特殊变量"></a>6.1 特殊变量</h3><p><strong>__name</strong>会被解释成<strong>_classname__name</strong>，进而形成私有变量。</p><p><strong>_name</strong>表明是一个私有变量，虽然可以直接访问，但是约定俗成不要直接访问。</p><h3 id="6-2-继承和多态"><a href="#6-2-继承和多态" class="headerlink" title="6.2 继承和多态"></a>6.2 继承和多态</h3><p>继承后的类叫做<strong>子类</strong>。</p><p>被继承的类叫做<strong>父类，基类，超类</strong>。</p><p>子类获得了父类的全部功能。</p><p>多态，子类重写父类方法时，子类调用该方法会直接调用 子类自己的方法而不是父类的方法。</p><p>“<strong>鸭子类型</strong>”：在python（动态语言）中，如果限定参数必须是某类，不会像静态语言那样必须要求是该类和其子类。</p><p>只需要有对应的可执行的方法就行。也就是看起来像就行（file-like object）。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Animal is running...'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_twice</span><span class="params">(animal)</span>:</span></span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Start...'</span>)</span><br><span class="line">        </span><br><span class="line"> <span class="comment"># 这样的操作是可以的</span></span><br><span class="line"> run_twice(Timer())</span><br></pre></td></tr></table></figure><h3 id="6-3-多重继承"><a href="#6-3-多重继承" class="headerlink" title="6.3 多重继承"></a>6.3 多重继承</h3><p>多重不断递进的方法通常是不可取的。</p><p>动物可能分哺乳动物和非哺乳动物，但是如果要区分爬行和飞行动物呢，可以不用继续继承，而是使用MixIn的方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTCPServer</span><span class="params">(TCPServer, ForkingMixIn)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUDPServer</span><span class="params">(UDPServer, ThreadingMixIn)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="6-4-特殊变量和方法"><a href="#6-4-特殊变量和方法" class="headerlink" title="6.4 特殊变量和方法"></a>6.4 特殊变量和方法</h3><h4 id="6-4-1-slots-和-dict"><a href="#6-4-1-slots-和-dict" class="headerlink" title="6.4.1 __slots__和__dict__"></a>6.4.1 __slots__和__dict__</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></span><br></pre></td></tr></table></figure><p>dict包含了一个类或者对象绑定的相关的属性。</p><p>直接输出就可以查看。字典类型。</p><h4 id="6-4-2-len"><a href="#6-4-2-len" class="headerlink" title="6.4.2 __len__()"></a>6.4.2 __len__()</h4><p>定义该方法之后，可以直接使用<strong>len(实例)</strong>。</p><h4 id="6-4-3-str-和-repr"><a href="#6-4-3-str-和-repr" class="headerlink" title="6.4.3 __str__()和__repr__()"></a>6.4.3 __str__()和__repr__()</h4><p>print()输入实例的时候调用__str__()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(<span class="string">'weihc'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&lt;__main__.Student object at <span class="number">0x109afb310</span>&gt;</span><br></pre></td></tr></table></figure><p>__repr__()用于改变这样的输出。</p><h4 id="6-4-4-iter-和-next"><a href="#6-4-4-iter-和-next" class="headerlink" title="6.4.4 __iter__()和__next__()"></a>6.4.4 __iter__()和__next__()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = <span class="number">0</span>, <span class="number">1</span> <span class="comment"># 初始化两个计数器a，b</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a, self.b = self.b, self.a + self.b <span class="comment"># 计算下一个值</span></span><br><span class="line">        <span class="keyword">if</span> self.a &gt; <span class="number">100000</span>: <span class="comment"># 退出循环的条件</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.a <span class="comment"># 返回下一个值</span></span><br></pre></td></tr></table></figure><h4 id="6-4-5-getitem-和-getattr"><a href="#6-4-5-getitem-和-getattr" class="headerlink" title="6.4.5 __getitem__()和__getattr__()"></a>6.4.5 __getitem__()和__getattr__()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(n, int): <span class="comment"># n是索引</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">if</span> isinstance(n, slice): <span class="comment"># n是切片</span></span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            a, b = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">            L = []</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(stop):</span><br><span class="line">                <span class="keyword">if</span> x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            <span class="keyword">return</span> L</span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = Fib()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>__getattr__()虽然函数名类似，但是功能完全不同。</p><p>当调用实例中不存在的属性的时候，会调用该方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'weihc'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> attr==<span class="string">'score'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'weihc'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.score</span><br><span class="line"><span class="number">99</span></span><br></pre></td></tr></table></figure><h4 id="6-4-6-del"><a href="#6-4-6-del" class="headerlink" title="6.4.6 __del__()"></a>6.4.6 __del__()</h4><p>析构函数。</p><p>调用del可能会触发改函数，会先判断引用计数是否为0了， 如果为0了就会执行。</p><p>在程序完成之后会执行该函数。</p><h4 id="6-4-7-enter-和-exit"><a href="#6-4-7-enter-和-exit" class="headerlink" title="6.4.7 __enter__()和__exit__()"></a>6.4.7 __enter__()和__exit__()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(exc_type, exc_val, exc_tb)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span>     <span class="comment"># 出错之后程序不会中断</span></span><br><span class="line">        <span class="comment"># return False  # 出错之后程序会中断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Foo() <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">raise</span> KeyError(<span class="string">"ERROR"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"done"</span>)</span><br></pre></td></tr></table></figure><p>with的执行过程是：</p><ul><li>创建Foo()对象，调用init();</li><li>执行enter方法，返回值赋值给变量f；</li><li>执行with内容，出错或者执行完毕执行exit()方法。返回值为True程序继续执行。</li></ul><h3 id="6-5-元类"><a href="#6-5-元类" class="headerlink" title="6.5 元类"></a>6.5 元类</h3><h4 id="6-5-1-基本形式"><a href="#6-5-1-基本形式" class="headerlink" title="6.5.1 基本形式"></a>6.5.1 基本形式</h4><p>元类的含义相当于是生成类的类。</p><p>在定义一个类的时候， 传入参数metaclass。</p><p>基本定义方式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListMetaclass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        attrs[<span class="string">'add'</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyList</span><span class="params">(list, metaclass=ListMetaclass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>new()函数的四个参数分别是：</p><ul><li>当前准备创建的类的对象；</li><li>类的名字；</li><li>类继承的父类集合；</li><li>类的方法集合</li></ul><p>执行过程是， 在创建类MyList的时候调用ListMetaclass的new()方法。</p><p>其中要注意的是，创建带有元类的类的时候，会先遍历类的内容，在创建。</p><h4 id="6-5-2-type"><a href="#6-5-2-type" class="headerlink" title="6.5.2 type"></a>6.5.2 type</h4><p>正常使用type创建一个类可以使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="string">'class_name'</span>, (object,), dict(class_func=fn))</span><br></pre></td></tr></table></figure><p>传入三个参数： 类名， 继承的父类集合， 方法名称与函数绑定集合。</p><h4 id="6-5-3-new-和-init"><a href="#6-5-3-new-和-init" class="headerlink" title="6.5.3 __new__()和__init__()"></a>6.5.3 __new__()和__init__()</h4><p>new()函数用于创建该类的实例。需要返回值。</p><p>init()函数用于初始化该类实例。 在new()函数正确执行且返回生成好的对象之后才执行，不需要返回值。</p><p>new()函数创建对象的方式， 一般是使用父类的new()创建。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure><h4 id="6-5-4-调用父类init方法"><a href="#6-5-4-调用父类init方法" class="headerlink" title="6.5.4 调用父类init方法"></a>6.5.4 调用父类init方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super(StringField, self).__init__(name, <span class="string">'varchar(100)'</span>)</span><br></pre></td></tr></table></figure><p>super()函数传入两个参数，一个是当前类名，另一个是当前类的实例对象。</p><p>注意super函数需要传入实例对象。</p><p>使用super()函数而不是直接使用父类来直接调用函数还因为super()函数会处理多继承的问题。</p><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7 测试"></a>7 测试</h2><h3 id="7-1-单元测试"><a href="#7-1-单元测试" class="headerlink" title="7.1 单元测试"></a>7.1 单元测试</h3><p>编写测试类需要继承<code>unittest.TestCase</code>。</p><p>测试方法需要以test开头， 否则不会执行。</p><p>常用的判断测试的方法是：</p><ul><li><code>self.assertEqual(d.b, &#39;test&#39;)</code></li><li><code>self.assertTrue(isinstance(d, dict))</code></li><li><code>with self.assertRaises(KeyError): value = d[&#39;empty&#39;]</code></li></ul><p>运行单元测试的方法：</p><ul><li><code>unittest.main()</code></li><li><code>python -m unittest mydict_test</code>， 注意只需要文件名， 没有后缀。</li></ul><p>可以在单元测试中编写两个特殊的<code>setUp()</code>和<code>tearDown()</code>方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDict</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = Dict(a=<span class="number">1</span>, b=<span class="string">'test'</span>)</span><br><span class="line">        self.assertEqual(d.a, <span class="number">1</span>)</span><br><span class="line">        self.assertEqual(d.b, <span class="string">'test'</span>)</span><br><span class="line">        self.assertTrue(isinstance(d, dict))</span><br></pre></td></tr></table></figure><h3 id="7-2-文档测试"><a href="#7-2-文档测试" class="headerlink" title="7.2 文档测试"></a>7.2 文档测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">doctest.testmod()</span><br></pre></td></tr></table></figure><h2 id="8-文件操作"><a href="#8-文件操作" class="headerlink" title="8 文件操作"></a>8 文件操作</h2><h3 id="8-1-文件句柄"><a href="#8-1-文件句柄" class="headerlink" title="8.1 文件句柄"></a>8.1 文件句柄</h3><p>文件句柄对于打开文件是唯一的识别依据。</p><h2 id="9-内置函数"><a href="#9-内置函数" class="headerlink" title="9 内置函数"></a>9 内置函数</h2><h3 id="9-1-all-和any"><a href="#9-1-all-和any" class="headerlink" title="9.1 all()和any()"></a>9.1 all()和any()</h3><p><code>all()</code>函数要所有值bool之后为True才为True，否则为Flase；</p><p><code>any()</code>与之相反。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>all([])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>all([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>all([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="keyword">None</span>])</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="9-2-进制转换"><a href="#9-2-进制转换" class="headerlink" title="9.2 进制转换"></a>9.2 进制转换</h3><ul><li><code>bin()</code> 二进制</li><li><code>oct()</code> 八进制</li><li><code>hex()</code> 十六进制</li></ul><h3 id="9-3-字符编码转化"><a href="#9-3-字符编码转化" class="headerlink" title="9.3 字符编码转化"></a>9.3 字符编码转化</h3><ul><li><code>chr()</code> 编码转化为字符</li><li><code>ord()</code> 字符转化为编码</li></ul><h3 id="9-4-divmod"><a href="#9-4-divmod" class="headerlink" title="9.4 divmod"></a>9.4 divmod</h3><p>返回商和余数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-输入输出&quot;&gt;&lt;a href=&quot;#1-输入输出&quot; class=&quot;headerlink&quot; title=&quot;1 输入输出&quot;&gt;&lt;/a&gt;1 输入输出&lt;/h2&gt;&lt;p&gt;&lt;code&gt;print()&lt;/code&gt;函数可以传入多个参数，多个参数以空格分割&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="python" scheme="http://weihuchao.top/categories/python/"/>
    
    
      <category term="python" scheme="http://weihuchao.top/tags/python/"/>
    
      <category term="基础" scheme="http://weihuchao.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python解释器</title>
    <link href="http://weihuchao.top/2018/09/01/python%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>http://weihuchao.top/2018/09/01/python解释器/</id>
    <published>2018-08-31T16:00:00.000Z</published>
    <updated>2018-09-06T11:57:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Python的常用解释器"><a href="#1-Python的常用解释器" class="headerlink" title="1 Python的常用解释器"></a>1 Python的常用解释器</h2><h3 id="CPython"><a href="#CPython" class="headerlink" title="CPython"></a>CPython</h3><p>官方版本的解释器：CPython。</p><p>这个解释器是用C语言开发的，所以叫CPython。</p><p>默认在命令行下运行python就是启动CPython解释器。</p><p>CPython是使用最广的Python解释器</p><h3 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h3><p>IPython是基于CPython之上的一个交互式解释器，只是在交互方式上有所增强。</p><p>CPython用<strong>&gt;&gt;&gt;</strong>作为提示符，而IPython用<strong>In [序号]:</strong>作为提示符。</p><h3 id="PyPy"><a href="#PyPy" class="headerlink" title="PyPy"></a>PyPy</h3><p>PyPy是另一个Python解释器，它的目标是执行速度。</p><p>PyPy采用<strong>JIT技术</strong>，对Python代码进行<strong>动态编译</strong>（注意不是解释），所以可以<strong>显著提高Python代码的执行速度</strong>。</p><p>绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。</p><h3 id="Jython"><a href="#Jython" class="headerlink" title="Jython"></a>Jython</h3><p>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</p><h3 id="IronPython"><a href="#IronPython" class="headerlink" title="IronPython"></a>IronPython</h3><p>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p><h2 id="2-解释-提前编译-实时编译"><a href="#2-解释-提前编译-实时编译" class="headerlink" title="2 解释 提前编译 实时编译"></a>2 解释 提前编译 实时编译</h2><h3 id="提前（AOT）编译"><a href="#提前（AOT）编译" class="headerlink" title="提前（AOT）编译"></a>提前（AOT）编译</h3><p>编译高级编程语言为对应的机器代码， 以便生成的二进制文件可以本机执行。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>解释是<strong>直接执行脚本语言</strong>， 而不需要事先将它们编译成机器语言。</p><p>解释器的主要缺点是解释程序通常比编译时运行得<strong>慢</strong>。</p><p>解释器通常使用以下策略之一来执行程序：</p><ul><li>解析的源代码，并直接执行其行为;</li><li>将源代码转换为一些有效的<strong>中间表示</strong>并立即执行此操作;</li><li>显式执行由编译器生成的存储的预编译代码，编译器是解释器系统的一部分。</li></ul><p>术语“ <strong>解释语言</strong> ”或“ <strong>编译语言</strong> ”表示该语言的规范实现分别是<strong>解释器</strong>或<strong>编译器</strong>。</p><h3 id="实时（JIT）编译"><a href="#实时（JIT）编译" class="headerlink" title="实时（JIT）编译"></a>实时（JIT）编译</h3><p>涉及程序执行期间的编译。</p><p>实时编译系统通常的做法是，连续地分析正在执行的代码，并识别代码的一部分，从而得到加速。且编译或重新编译获得的加速比将超过编译该代码的开销。</p><p>JIT编译结合了编译代码的速度和解释的灵活性，以及​解释器的开销和编译的额外开销（而不仅仅是解释）。</p><p>理论上，JIT编译可以比静态编译产生更快的执行速度。</p><h2 id="3-CPython和PyPy之间的差异"><a href="#3-CPython和PyPy之间的差异" class="headerlink" title="3 CPython和PyPy之间的差异"></a>3 CPython和PyPy之间的差异</h2><p><a href="https://pypy.readthedocs.io/en/latest/cpython_differences.html" target="_blank" rel="noopener">点我查看详细</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Python的常用解释器&quot;&gt;&lt;a href=&quot;#1-Python的常用解释器&quot; class=&quot;headerlink&quot; title=&quot;1 Python的常用解释器&quot;&gt;&lt;/a&gt;1 Python的常用解释器&lt;/h2&gt;&lt;h3 id=&quot;CPython&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="python" scheme="http://weihuchao.top/categories/python/"/>
    
    
      <category term="python" scheme="http://weihuchao.top/tags/python/"/>
    
      <category term="解释器" scheme="http://weihuchao.top/tags/%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>夏の幻-Garnet Crow</title>
    <link href="http://weihuchao.top/2018/08/21/%E5%A4%8F%E4%B9%8B%E5%B9%BB-Garnet%20Crow/"/>
    <id>http://weihuchao.top/2018/08/21/夏之幻-Garnet Crow/</id>
    <published>2018-08-20T16:00:00.000Z</published>
    <updated>2018-09-01T04:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>部屋(へや)の窓(まど)の向(む)こうに<br>へやのまどのむこうに<br>飞行机云(ひこうきぐも)を なぞって<br>ひこうきぐもを なぞって<br>今日(きょう)ケンカした君(きみ)の事(こと)ばかり<br>考(かんが)えてた</p><p>些细(ささい)な事(こと)で戸惑(とまど)って<br>不安定(ふあんてい)で无防备(むぼうび)な<br>あの顷(ころ)のように<br>すぐに电话(でんわ)して<br>笑(わら)い合(あ)えたらいいのにね</p><p>近(ちか)づいて来(く)る 至福(しふく)の时(とき)は<br>痛(いた)みを伴(ともな)いながら足音(あしおと)をたてる<br>考(かんが)えすぎて深(ふか)みにハマる<br>君(きみ)の傍(そば)にいるのに</p><p>夏(なつ)の幻(まぼろし)<br>瞳闭(ひとみと)じて<br>一番最初(いちばんさいしょ)に君(きみ)を思(おも)い出(だ)すよ<br>いつか终(お)わる儚(はかな)い生命(ゆめ)に<br>ただ こみあげる気持(きも)ちい抱(だ)いた</p><p>世界(せかい)は広(ひろ)く<br>知(し)らない事溢(ことあふ)れてて自分(じぶん)さえ见失(みうしな)いそう<br>だけど君(きみ)と生(い)きてゆきたいから<br>とまどいながらでもいい<br>つないだ手(て)を离(はな)さないでね</p><p>强(つよ)いオフショア<br>波(なみ)を待(ま)ってた<br>中途半端(ちゅうとはんぱ)に离(はな)れて<br>流(なが)されてゆくよ<br>进化(しんか)してゆく时代(じだい)の中(なか)で<br>同(おな)じものを求(もと)めて</p><p>夏(なつ)の幻(まぼろし)<br>想(おも)うだけで<br>胸(むね)が热(あつ)くなれた奇迹(きせき)の途中(とちゅう)<br>愿(ねが)うだけじゃ　届(とど)かぬくらい<br>こぼれ落(お)ちそうな気持(きも)ち抱(だ)いた</p><p>どうして二人(ふたり)<br>近(ちか)づく程(ほど)<br>远(とお)く感(かん)じて　不安(ふあん)になるんだろう<br>キョリを超(こ)えた　欲望(よくぼう)があふれて<br>一人(ひとり) 部屋(へや)のなかで<br>君(きみ)の温(ぬく)もり想(おも)う</p><p>どんな日(ひ)にも<br>瞳闭(ひとみと)じて<br>一番最初(いちばんさいしょ)に　君(きみ)を思(おも)い出(だ)すよ<br>いつか终(お)わる儚(はかな)い生命（ゆめ）に<br>ただ こみあげる気持(きも)ち抱(だ)いた</p><p>忘(わす)れないから…<br>消(き)えゆく幻(まぼろし)に<br>君(きみ)と并(なら)んでいたね<br>夏(なつ)の终(お)わり阳射(ひざ)しがゆれてる<br>海(うみ)の底(そこ)のような手(て)のひらの中(なか)の街并(まちなみ)</p><p>I like a dream<br>I’m calling out to you</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;部屋(へや)の窓(まど)の向(む)こうに&lt;br&gt;へやのまどのむこうに&lt;br&gt;飞行机云(ひこうきぐも)を なぞって&lt;br&gt;ひこうきぐもを なぞって&lt;br&gt;今日(きょう)ケンカした君(きみ)の事(こと)ばかり&lt;br&gt;考(かんが)えてた&lt;/p&gt;
&lt;p&gt;些细(ささい)な事(こと)で
      
    
    </summary>
    
      <category term="Music" scheme="http://weihuchao.top/categories/Music/"/>
    
    
      <category term="歌词" scheme="http://weihuchao.top/tags/%E6%AD%8C%E8%AF%8D/"/>
    
      <category term="音乐" scheme="http://weihuchao.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>高飞-张杰</title>
    <link href="http://weihuchao.top/2018/07/08/%E9%AB%98%E9%A3%9E-%E5%BC%A0%E6%9D%B0/"/>
    <id>http://weihuchao.top/2018/07/08/高飞-张杰/</id>
    <published>2018-07-07T16:00:00.000Z</published>
    <updated>2018-07-07T12:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="歌词"><a href="#歌词" class="headerlink" title="歌词"></a>歌词</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>奔跑穿越无尽的荒原<br>逐梦的脚步突然停歇<br>无边断崖 横在眼前<br>我懂 我要 蜕变</p><p>偶尔想起温暖的昨天<br>为了梦想不再留恋<br>新的起点就在眼前<br>我已做好准备</p><p>我要高飞 到天空的顶点<br>我要飞到<strong>无人</strong>能及的视界<br>飞得再累 不准自己跌坠<br>直到太阳就在我的指尖</p><p>我要高飞 到世界的边缘<br>我要飞越<strong>没人</strong>到达的绝对<br>不到终点 不准流下眼泪<br>要把最震撼的呐喊留在灿烂瞬间</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>偶尔想起温暖的昨天<br>为了梦想不再留恋<br>新的起点就在眼前<br>我已做好准备</p><p>我要高飞 到天空的顶点<br>我要飞到<strong>无人</strong>能及的视界<br>飞得再累 不准自己跌坠<br>直到太阳就在我的指尖</p><p>我要高飞 到世界的边缘<br>我要飞越<strong>没人</strong>到达的绝对<br>不到终点 不准流下眼泪<br>要把最震撼的呐喊留在</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>我要高飞 到天空的顶点<br>我要飞到<strong>无人</strong>能及的视界<br>飞得再累 不准自己跌坠<br>直到太阳就在我的指尖</p><p>我要高|飞 到世界的边缘<br>我要飞越<strong>没人</strong>到达的绝对<br>不到终|点 不准流下眼泪<br>要把最震撼的呐喊<br>留在灿烂瞬间</p><p>灿烂瞬间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;歌词&quot;&gt;&lt;a href=&quot;#歌词&quot; class=&quot;headerlink&quot; title=&quot;歌词&quot;&gt;&lt;/a&gt;歌词&lt;/h2&gt;&lt;h3 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;/h3&gt;&lt;p&gt;奔跑穿越无尽的
      
    
    </summary>
    
      <category term="Music" scheme="http://weihuchao.top/categories/Music/"/>
    
    
      <category term="歌词" scheme="http://weihuchao.top/tags/%E6%AD%8C%E8%AF%8D/"/>
    
      <category term="音乐" scheme="http://weihuchao.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
</feed>
